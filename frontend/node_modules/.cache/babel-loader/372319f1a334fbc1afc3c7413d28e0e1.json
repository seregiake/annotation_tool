{"ast":null,"code":"var _jsxFileName = \"/Users/serenagiachetti/Desktop/projects/annotation_tool/frontend/src/components/ColorCanvas.js\";\nimport React, { Component } from 'react';\n\nclass ColorCanvas extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      drawingAreaX: 0,\n      drawingAreaY: 0,\n      canvasWidth: 0,\n      canvasHeight: 0,\n      mask: [],\n      clusterID: 0,\n      clusterList: [],\n      pointList: [],\n      draggedPointList: [],\n      draggedMaskPointList: [],\n      mouseDrag: false,\n      curColor: [255, 0, 0],\n      outlineColor: [0, 0, 0, 127]\n    };\n  }\n\n  componentDidMount() {\n    this.updateCanvas();\n  }\n\n  componentDidUpdate() {\n    this.updateCanvas();\n  }\n\n  updateCanvas() {\n    const canvas = this.refs.top;\n    const context = canvas.getContext('2d');\n    const {\n      mask,\n      size,\n      color\n    } = this.props; // eslint-disable-next-line\n\n    if (mask != undefined && size != undefined && color != undefined) {\n      context.canvas.width = size[0];\n      context.canvas.height = size[1];\n      context.clearRect(0, 0, size[0], size[1]); // draw children “components”\n      // crea colorImage\n      // fai get delle annotazioni esistenti\n      // e disegnale\n\n      this.createColorImage();\n    }\n  }\n\n  createColorImage() {\n    const {\n      size,\n      mask,\n      color\n    } = this.props;\n    const canvas = this.refs.top;\n    const context = canvas.getContext('2d');\n    let mask_matrix = JSON.parse(mask); // console.log(outline_matrix[0][0]);\n\n    let colorLayerData = context.createImageData(size[0], size[1]);\n    let colorImage = colorLayerData.data; // scroll the matrix with boundaries to create the outline image\n    // TODO: colora in base alle annotations\n    // draw the outline layer in the 3° canvas\n\n    context.putImageData(colorLayerData, 0, 0);\n  }\n\n  clickMouse(event) {\n    console.log(this.state);\n    let [x, y] = this.getMousePos(event);\n    console.log(this.state);\n    console.log(\"x: \" + x + \", y: \" + y); //this.paintAt(x, y);\n  }\n\n  getMousePos(e) {\n    const {\n      size,\n      mask\n    } = this.props;\n    let color_canvas = this.refs.top;\n    let drawingAreaX = color_canvas.getBoundingClientRect().left;\n    let drawingAreaY = color_canvas.getBoundingClientRect().top;\n    let mask_matrix = JSON.parse(mask);\n    console.log(mask);\n    console.log(JSON.parse(mask));\n    this.setState(() => {\n      return {\n        drawingAreaX: drawingAreaX,\n        drawingAreaY: drawingAreaY,\n        canvasWidth: size[0],\n        canvasHeight: size[1],\n        mask: mask_matrix\n      };\n    }); // mouse click coordinates on the canvas rounded to manage float case\n\n    let mouseX = Math.round(e.pageX - document.body.scrollLeft - document.documentElement.scrollLeft - drawingAreaX),\n        mouseY = Math.round(e.pageY - document.body.scrollTop - document.documentElement.scrollTop - drawingAreaY);\n    return [mouseX, mouseY];\n  }\n\n  dragStart(event) {//TODO\n  }\n\n  dragOver(event) {//TODO\n  }\n\n  dragEnd(event) {//TODO\n  }\n\n  paintAt(startX, startY) {\n    const {\n      size,\n      color\n    } = this.props;\n    const canvas = this.canvasRef.current;\n    const context = canvas.getContext('2d'); // eslint-disable-next-line\n\n    if (size != undefined && color != undefined) {\n      let colorImage = context.getImageData(0, 0, size[0], size[1]).data; // takes pixel RGBA color\n\n      let pixelPos = (startY * size[0] + startX) * 4,\n          r = colorImage[pixelPos],\n          g = colorImage[pixelPos + 1],\n          b = colorImage[pixelPos + 2],\n          a = colorImage[pixelPos + 3]; // return if you try to recolor the area with the same color and the same opacity\n\n      if (r == color[0] && g == color[1] && b == color[2] && a == color[3]) {\n        this.floodFill(startX, startY, r, g, b, a, [0, 0, 0, 0], this.state.mask, colorImage);\n        redraw(); // delete the element from clusterList and pointList\n\n        this.setState(prevState => {\n          return {\n            clusterList: prevState.clusterList.splice(prevState.clusterList.indexOf(this.state.mask[startY][startX]), 1),\n            pointList: prevState.pointList.splice(prevState.clusterList.indexOf(this.state.mask[startY][startX]), 1)\n          };\n        });\n        return;\n      } // call floodFill method and pass to it initial (x,y) and initial RGBA of the pixel clicked\n\n\n      this.floodFill(startX, startY, r, g, b, a, color, this.state.mask, colorImage);\n      redraw();\n      this.setState(prevState => {\n        return {\n          clusterList: prevState.clusterList.push(this.state.mask[startY][startX]),\n          pointList: prevState.pointList.push([startX, startY])\n        };\n      });\n    }\n  }\n\n  floodFill(startX, startY, startR, startG, startB, startA, newColor, mask, colorImage) {\n    let newPos,\n        x,\n        y,\n        pixelPos,\n        reachLeft,\n        reachRight,\n        canvasBoundLeft = 0,\n        canvasBoundTop = 0,\n        canvasBoundRight = canvasBoundLeft + this.state.canvasWidth - 1,\n        canvasBoundBottom = canvasBoundTop + this.state.canvasHeight - 1,\n        pixelStack = [[startX, startY]];\n    this.setState(() => {\n      return {\n        clusterID: this.state.mask[startY][startX]\n      };\n    });\n\n    while (pixelStack.length) {\n      newPos = pixelStack.pop();\n      x = newPos[0];\n      y = newPos[1]; // takes current pixel position\n\n      pixelPos = (y * this.state.canvasWidth + x) * 4; // go up inside the canvas until initialColor matches\n\n      while (y >= canvasBoundTop && this.matchInitialColor(pixelPos, x, y, startR, startG, startB, startA, newColor, colorImage, mask)) {\n        y -= 1;\n        pixelPos -= this.state.canvasWidth * 4;\n      }\n\n      pixelPos += this.state.canvasWidth * 4;\n      y += 1;\n      reachLeft = false;\n      reachRight = false; // go down inside the canvas until initialColor matches\n\n      while (y <= canvasBoundBottom && this.matchInitialColor(pixelPos, x, y, startR, startG, startB, startA, newColor, colorImage, mask)) {\n        //y += 1;\n        this.colorPixel(pixelPos, newColor[0], newColor[1], newColor[2], newColor[3], colorImage);\n\n        if (x > canvasBoundLeft) {\n          //check left side pixel\n          if (this.matchInitialColor(pixelPos - 4, x - 1, y, startR, startG, startB, startA, newColor, colorImage, mask)) {\n            if (!reachLeft) {\n              //aggiungi pixel allo stack\n              pixelStack.push([x - 1, y]);\n              reachLeft = true;\n            }\n          } else if (reachLeft) {\n            reachLeft = false;\n          }\n        }\n\n        if (x < canvasBoundRight) {\n          //check right side pixel\n          if (this.matchInitialColor(pixelPos + 4, x + 1, y, startR, startG, startB, startA, newColor, colorImage, mask)) {\n            if (!reachRight) {\n              //aggiungi pixel allo stack\n              pixelStack.push([x + 1, y]);\n              reachRight = true;\n            }\n          } else if (reachRight) {\n            reachRight = false;\n          }\n        }\n\n        y += 1;\n        pixelPos += this.state.canvasWidth * 4;\n      }\n    }\n  }\n\n  matchInitialColor(pixelPos, x, y, startR, startG, startB, startA, newColor, colorImage, mask) {\n    let different_cluster = false; // console.log(mask[y][x]);\n\n    console.log(this.state.mask[y][x]); // eslint-disable-next-line\n\n    if (this.state.mask[y][x] != this.state.clusterID) {\n      //console.log(mask[y][x]);\n      different_cluster = true;\n    } // check if current pixel is in outline image and has different cluster_id\n\n\n    if (this.matchOutlineBorder(pixelPos) && different_cluster) {\n      return false;\n    }\n\n    let r = colorImage[pixelPos],\n        g = colorImage[pixelPos + 1],\n        b = colorImage[pixelPos + 2],\n        a = colorImage[pixelPos + 3]; // If the current pixel matches the clicked color\n    // eslint-disable-next-line\n\n    if (r == startR && g == startG && b == startB && a == startA) {\n      return true;\n    } // If current pixel color is already colored with new color and opacity\n    // eslint-disable-next-line\n\n\n    if (r == newColor[0] && g == newColor[1] && b == newColor[2] && a == newColor[3]) {\n      return false;\n    }\n\n    return true;\n  }\n\n  colorPixel(pixelPos, r, g, b, a, colorImage) {\n    colorImage[pixelPos] = r;\n    colorImage[pixelPos + 1] = g;\n    colorImage[pixelPos + 2] = b;\n    colorImage[pixelPos + 3] = a !== undefined ? a : 255;\n  }\n\n  matchOutlineBorder(pixelPos) {\n    const {\n      boundaries\n    } = this.props;\n    let outline_matrix = JSON.parse(boundaries);\n    let pixel = outline_matrix[pixelPos];\n    return String(pixel[0]) === '0';\n    /*\n    let r = outlineImage[pixelPos],\n        g = outlineImage[pixelPos + 1],\n        b = outlineImage[pixelPos + 2],\n        a = outlineImage[pixelPos + 3];\n     return (r === outlineColor[0] && g === outlineColor[1] && b === outlineColor[2] && a == outlineColor[3] );\n     */\n  }\n\n  render() {\n    return React.createElement(\"canvas\", {\n      id: \"color\",\n      ref: \"top\",\n      style: {\n        zIndex: 3,\n        position: 'absolute'\n      },\n      onClick: event => this.clickMouse(event),\n      onDragStart: event => this.dragStart(event),\n      onDragOver: event => this.dragOver(event),\n      onDragEnd: event => this.dragEnd(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, \"Sorry, your browser doesn't support the <canvas> element.\");\n  }\n\n}\n\nexport default ColorCanvas;\n\nfunction redraw() {}","map":{"version":3,"sources":["/Users/serenagiachetti/Desktop/projects/annotation_tool/frontend/src/components/ColorCanvas.js"],"names":["React","Component","ColorCanvas","constructor","props","state","drawingAreaX","drawingAreaY","canvasWidth","canvasHeight","mask","clusterID","clusterList","pointList","draggedPointList","draggedMaskPointList","mouseDrag","curColor","outlineColor","componentDidMount","updateCanvas","componentDidUpdate","canvas","refs","top","context","getContext","size","color","undefined","width","height","clearRect","createColorImage","mask_matrix","JSON","parse","colorLayerData","createImageData","colorImage","data","putImageData","clickMouse","event","console","log","x","y","getMousePos","e","color_canvas","getBoundingClientRect","left","setState","mouseX","Math","round","pageX","document","body","scrollLeft","documentElement","mouseY","pageY","scrollTop","dragStart","dragOver","dragEnd","paintAt","startX","startY","canvasRef","current","getImageData","pixelPos","r","g","b","a","floodFill","redraw","prevState","splice","indexOf","push","startR","startG","startB","startA","newColor","newPos","reachLeft","reachRight","canvasBoundLeft","canvasBoundTop","canvasBoundRight","canvasBoundBottom","pixelStack","length","pop","matchInitialColor","colorPixel","different_cluster","matchOutlineBorder","boundaries","outline_matrix","pixel","String","render","zIndex","position"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nclass ColorCanvas extends Component {\n\n    constructor (props){\n        super(props);\n        this.state = {\n            drawingAreaX: 0,\n            drawingAreaY: 0,\n            canvasWidth: 0,\n            canvasHeight: 0,\n            mask: [],\n            clusterID: 0,\n            clusterList: [],\n            pointList: [],\n            draggedPointList: [],\n            draggedMaskPointList: [],\n            mouseDrag: false,\n            curColor: [255, 0, 0],\n            outlineColor: [0, 0, 0, 127],\n\n        }\n    }\n\n    componentDidMount() {\n        this.updateCanvas();\n    }\n\n    componentDidUpdate() {\n        this.updateCanvas();\n    }\n\n    updateCanvas() {\n        const canvas = this.refs.top;\n        const context = canvas.getContext('2d');\n        const { mask, size, color } = this.props;\n\n        // eslint-disable-next-line\n        if (mask != undefined && size != undefined && color != undefined){\n            context.canvas.width = size[0];\n            context.canvas.height = size[1];\n            context.clearRect(0,0, size[0], size[1]);\n\n            // draw children “components”\n            // crea colorImage\n            // fai get delle annotazioni esistenti\n            // e disegnale\n            this.createColorImage();\n\n        }\n    }\n\n    createColorImage() {\n        const { size, mask, color } = this.props;\n        const canvas = this.refs.top;\n        const context = canvas.getContext('2d');\n\n        let mask_matrix = JSON.parse(mask);\n\n        // console.log(outline_matrix[0][0]);\n\n        let colorLayerData = context.createImageData(size[0], size[1]);\n        let colorImage = colorLayerData.data;\n        // scroll the matrix with boundaries to create the outline image\n\n        // TODO: colora in base alle annotations\n\n\n        // draw the outline layer in the 3° canvas\n        context.putImageData(colorLayerData, 0, 0);\n\n\n    }\n\n    clickMouse(event){\n\n        console.log(this.state);\n        let [x, y] = this.getMousePos(event);\n        console.log(this.state);\n        console.log(\"x: \" + x + \", y: \" + y);\n        //this.paintAt(x, y);\n\n    }\n\n    getMousePos(e){\n        const {  size, mask } = this.props;\n        let color_canvas = this.refs.top;\n        let drawingAreaX = color_canvas.getBoundingClientRect().left;\n        let drawingAreaY = color_canvas.getBoundingClientRect().top;\n        let mask_matrix = JSON.parse(mask);\n        console.log(mask);\n        console.log(JSON.parse(mask));\n\n        this.setState(() =>{\n           return {\n                drawingAreaX: drawingAreaX,\n                drawingAreaY: drawingAreaY,\n                canvasWidth: size[0],\n                canvasHeight: size[1],\n                mask: mask_matrix\n           }\n        });\n\n        // mouse click coordinates on the canvas rounded to manage float case\n        let mouseX = Math.round(e.pageX - document.body.scrollLeft - document.documentElement.scrollLeft - drawingAreaX),\n            mouseY = Math.round(e.pageY - document.body.scrollTop - document.documentElement.scrollTop - drawingAreaY);\n\n        return [mouseX, mouseY];\n\n    }\n\n    dragStart(event){\n        //TODO\n    }\n\n    dragOver(event){\n        //TODO\n    }\n\n    dragEnd(event){\n        //TODO\n    }\n\n    paintAt(startX, startY){\n        const { size, color} = this.props;\n        const canvas = this.canvasRef.current;\n        const context = canvas.getContext('2d');\n\n        // eslint-disable-next-line\n        if(size != undefined && color != undefined){\n\n            let colorImage = context.getImageData(0,0, size[0], size[1]).data;\n\n            // takes pixel RGBA color\n            let pixelPos = (startY * size[0] + startX) * 4,\n                r = colorImage[pixelPos],\n                g = colorImage[pixelPos + 1],\n                b = colorImage[pixelPos + 2],\n                a = colorImage[pixelPos + 3];\n\n            // return if you try to recolor the area with the same color and the same opacity\n            if (r == color[0] && g == color[1] && b == color[2] && a == color[3]){\n\n                this.floodFill(startX, startY, r, g, b, a, [0, 0, 0, 0], this.state.mask, colorImage);\n                redraw();\n\n                // delete the element from clusterList and pointList\n\n                this.setState(prevState =>{\n                    return {\n                        clusterList: prevState.clusterList.splice( prevState.clusterList.indexOf(this.state.mask[startY][startX]), 1 ),\n                        pointList: prevState.pointList.splice( prevState.clusterList.indexOf(this.state.mask[startY][startX]), 1)\n                    }\n                });\n\n                return\n            }\n\n            // call floodFill method and pass to it initial (x,y) and initial RGBA of the pixel clicked\n            this.floodFill(startX, startY, r, g, b, a, color, this.state.mask, colorImage);\n            redraw();\n\n\n            this.setState(prevState =>{\n                return {\n                    clusterList: prevState.clusterList.push(this.state.mask[startY][startX]),\n                    pointList: prevState.pointList.push([startX, startY])\n                }\n            })\n\n        }\n\n    }\n\n    floodFill(startX, startY, startR, startG, startB, startA, newColor, mask, colorImage){\n\n\n        let newPos,\n            x,\n            y,\n            pixelPos,\n            reachLeft,\n            reachRight,\n            canvasBoundLeft = 0,\n            canvasBoundTop = 0,\n            canvasBoundRight = canvasBoundLeft + this.state.canvasWidth - 1,\n            canvasBoundBottom = canvasBoundTop + this.state.canvasHeight - 1,\n            pixelStack = [[startX, startY]];\n\n\n        this.setState(() =>{\n            return {\n                clusterID: this.state.mask[startY][startX]\n            }\n        });\n\n\n        while (pixelStack.length) {\n\n            newPos = pixelStack.pop();\n            x = newPos[0];\n            y = newPos[1];\n\n            // takes current pixel position\n            pixelPos = (y * this.state.canvasWidth + x) * 4;\n\n            // go up inside the canvas until initialColor matches\n            while (y >= canvasBoundTop && this.matchInitialColor(pixelPos, x, y, startR, startG, startB, startA, newColor, colorImage, mask)) {\n                y -= 1;\n                pixelPos -= this.state.canvasWidth * 4;\n            }\n\n            pixelPos += this.state.canvasWidth * 4;\n            y += 1;\n            reachLeft = false;\n            reachRight = false;\n\n            // go down inside the canvas until initialColor matches\n            while (y <= canvasBoundBottom && this.matchInitialColor(pixelPos, x, y, startR, startG, startB, startA, newColor, colorImage, mask)) {\n                //y += 1;\n\n                this.colorPixel(pixelPos, newColor[0], newColor[1], newColor[2], newColor[3], colorImage);\n\n                if (x > canvasBoundLeft) { //check left side pixel\n                    if (this.matchInitialColor(pixelPos - 4, x - 1, y, startR, startG, startB, startA, newColor, colorImage, mask)) {\n                        if (!reachLeft) {\n                            //aggiungi pixel allo stack\n                            pixelStack.push([x - 1, y]);\n                            reachLeft = true;\n                        }\n                    } else if (reachLeft) {\n                        reachLeft = false;\n                    }\n                }\n\n                if (x < canvasBoundRight) { //check right side pixel\n                    if (this.matchInitialColor(pixelPos + 4, x + 1, y, startR, startG, startB, startA, newColor, colorImage, mask)) {\n                        if (!reachRight) {\n                            //aggiungi pixel allo stack\n                            pixelStack.push([x + 1, y]);\n                            reachRight = true;\n                        }\n                    } else if (reachRight) {\n                        reachRight = false;\n                    }\n                }\n\n                y += 1;\n                pixelPos += this.state.canvasWidth * 4;\n\n            }\n        }\n    }\n\n    matchInitialColor(pixelPos, x, y, startR, startG, startB, startA, newColor, colorImage, mask){\n        let different_cluster = false;\n        // console.log(mask[y][x]);\n        console.log(this.state.mask[y][x]);\n        // eslint-disable-next-line\n        if(this.state.mask[y][x] != this.state.clusterID){\n           //console.log(mask[y][x]);\n           different_cluster = true;\n        }\n\n        // check if current pixel is in outline image and has different cluster_id\n        if (this.matchOutlineBorder(pixelPos) && different_cluster){\n            return false;\n        }\n\n\n        let r = colorImage[pixelPos],\n            g = colorImage[pixelPos + 1],\n            b = colorImage[pixelPos + 2],\n            a = colorImage[pixelPos + 3];\n\n        // If the current pixel matches the clicked color\n        // eslint-disable-next-line\n        if (r == startR && g == startG && b == startB && a == startA){\n            return true;\n        }\n\n        // If current pixel color is already colored with new color and opacity\n        // eslint-disable-next-line\n        if (r == newColor[0] && g == newColor[1] && b == newColor[2] && a == newColor[3] ) {\n            return false;\n        }\n\n        return true;\n    }\n\n    colorPixel(pixelPos, r, g, b, a, colorImage) {\n        colorImage[pixelPos] = r;\n        colorImage[pixelPos + 1] = g;\n        colorImage[pixelPos + 2] = b;\n        colorImage[pixelPos + 3] = a !== undefined ? a : 255;\n    }\n\n    matchOutlineBorder(pixelPos){\n\n        const { boundaries } = this.props;\n        let outline_matrix = JSON.parse(boundaries);\n\n        let pixel = outline_matrix[pixelPos];\n\n        return (String(pixel[0]) === '0');\n\n        /*\n        let r = outlineImage[pixelPos],\n            g = outlineImage[pixelPos + 1],\n            b = outlineImage[pixelPos + 2],\n            a = outlineImage[pixelPos + 3];\n\n        return (r === outlineColor[0] && g === outlineColor[1] && b === outlineColor[2] && a == outlineColor[3] );\n         */\n\n    }\n\n    render(){\n        return(\n            <canvas id=\"color\"\n                    ref=\"top\"\n                    style={{ zIndex: 3, position:'absolute'}}\n                    onClick={(event) => this.clickMouse(event)}\n                    onDragStart={(event) => this.dragStart(event)}\n                    onDragOver={(event) => this.dragOver(event)}\n                    onDragEnd={(event) => this.dragEnd(event)} >\n                Sorry, your browser doesn't support the &lt;canvas&gt; element. \n            </canvas> \n        )\n    }\n}\nexport default ColorCanvas;\n\n\n\nfunction redraw(){\n\n}"]},"metadata":{},"sourceType":"module"}