{"ast":null,"code":"var _jsxFileName = \"/Users/serenagiachetti/Desktop/projects/annotation_tool/frontend/src/components/ColorCanvas.js\";\nimport React, { Component } from 'react';\n\nclass ColorCanvas extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.state = {\n      drawingAreaX: 0,\n      drawingAreaY: 0,\n      clusterID: 0,\n      clusterList: [],\n      pointList: [],\n      draggedPointList: [],\n      draggedMaskPointList: [],\n      mouseDrag: false,\n      curColor: [255, 0, 0],\n      outlineColor: [0, 0, 0, 127]\n    };\n  }\n\n  componentDidMount() {\n    this.updateCanvas();\n  }\n\n  componentDidUpdate() {\n    this.updateCanvas();\n  }\n\n  updateCanvas() {\n    const canvas = this.canvasRef.current;\n    const context = canvas.getContext('2d');\n    const {\n      mask,\n      size,\n      color\n    } = this.props; //console.log(size);\n    // eslint-disable-next-line\n\n    if (mask != undefined && size != undefined && color != undefined) {\n      context.canvas.width = size[0];\n      context.canvas.height = size[1];\n      context.clearRect(0, 0, size[0], size[1]); // draw children “components”\n      // crea colorImage\n      // fai get delle annotazioni esistenti\n      // e disegnale\n      // createColorImage({context, boundaries, size, color});\n    }\n  }\n\n  getMousePos(e) {\n    let color_canvas = this.canvasRef.current;\n    let drawingAreaX = color_canvas.getBoundingClientRect().left;\n    let drawingAreaY = color_canvas.getBoundingClientRect().top; // get color_canvas position\n\n    this.setState(prevState => {\n      return {\n        drawingAreaX: drawingAreaX,\n        drawingAreaY: drawingAreaY\n      };\n    }); // mouse click coordinates on the canvas rounded to manage float case\n\n    let mouseX = Math.round(e.pageX - document.body.scrollLeft - document.documentElement.scrollLeft - drawingAreaX),\n        mouseY = Math.round(e.pageY - document.body.scrollTop - document.documentElement.scrollTop - drawingAreaY);\n    return [mouseX, mouseY];\n  }\n\n  clickMouse(event) {\n    let [x, y] = this.getMousePos(event);\n    console.log(\"x: \" + x + \", y: \" + y); //paintAt(x, y);\n  }\n\n  dragStart(event) {//TODO\n  }\n\n  dragOver(event) {//TODO\n  }\n\n  dragEnd(event) {//TODO\n  }\n\n  paintAt(startX, startY) {\n    const {\n      size,\n      color\n    } = this.props;\n\n    if (size != undefined && color != undefined) {\n      /*\n      // takes pixel RGBA color\n      let pixelPos = (startY * size[0] + startX) * 4,\n          r = colorImage[pixelPos],\n          g = colorImage[pixelPos + 1],\n          b = colorImage[pixelPos + 2],\n          a = colorImage[pixelPos + 3];\n       // console.log(\"pixelPos: \" + pixelPos);\n      //console.log(\"r: \" + r + \", g: \" + g + \", b: \" + b + \", a: \" + a);\n      //console.log(\"curColor[0] : \" + curColor[0]  + \", curColor[1] : \" + curColor[1] + \", curColor[2] : \" + curColor[2]  + \", curColor[3] : \" + curColor[3] );\n        // return if you try to recolor the area with the same color and the same opacity\n      if (r == curColor[0] && g == curColor[1] && b == curColor[2] && a == curColor[3]){\n           floodFill(startX, startY, r, g, b, a, [0, 0, 0, 0]);\n          redraw();\n           // delete the element from clusterList and pointList\n          clusterList.splice( clusterList.indexOf(mask[startY][startX]), 1 );\n          pointList.splice( clusterList.indexOf(mask[startY][startX]), 1);\n           return\n      }\n       // call floodFill method and pass to it initial (x,y) and initial RGBA of the pixel clicked\n      floodFill(startX, startY, r, g, b, a, curColor);\n      redraw();\n       clusterList.push(mask[startY][startX]);\n      pointList.push([startX, startY]);\n         */\n    }\n  }\n\n  render() {\n    return React.createElement(\"canvas\", {\n      id: \"color\",\n      ref: this.canvasRef,\n      style: {\n        zIndex: 3,\n        position: 'absolute',\n        backgroundColor: 'rgba(255,0,0,0.45)'\n      },\n      onClick: event => this.clickMouse(event),\n      onDragStart: event => this.dragStart(event),\n      onDragOver: event => this.dragOver(event),\n      onDragEnd: event => this.dragEnd(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Sorry, your browser doesn't support the <canvas> element.\");\n  }\n\n}\n\nexport default ColorCanvas;\n\nfunction createColorImage(props) {\n  const {\n    context,\n    size,\n    mask,\n    color\n  } = props;\n  let mask_matrix = JSON.parse(mask); // console.log(outline_matrix[0][0]);\n\n  let outlineLayerData = context.createImageData(size[0], size[1]);\n  let outlineImage = outlineLayerData.data; // scroll the matrix with boundaries to create the outline image\n\n  let len = outlineLayerData.data.length; // console.log(len);\n\n  let col = 0,\n      row = 0;\n  let pixel = [];\n\n  for (let i = 0; i < len && row < size[1]; i += 4) {\n    pixel = outline_matrix[row][col]; // console.log(\"pixel: \" + pixel);\n\n    if (String(pixel[0]) === '0') {\n      outlineImage[i] = color[0]; // r\n\n      outlineImage[i + 1] = color[1]; // g\n\n      outlineImage[i + 2] = color[2]; // b\n\n      outlineImage[i + 3] = color[3]; // a\n    }\n\n    if (col === size[0] - 1) {\n      row++;\n      col = 0;\n    } else {\n      col++;\n    }\n  } // draw the outline layer in the 3° canvas\n\n\n  context.putImageData(outlineLayerData, 0, 0);\n}","map":{"version":3,"sources":["/Users/serenagiachetti/Desktop/projects/annotation_tool/frontend/src/components/ColorCanvas.js"],"names":["React","Component","ColorCanvas","constructor","props","canvasRef","createRef","state","drawingAreaX","drawingAreaY","clusterID","clusterList","pointList","draggedPointList","draggedMaskPointList","mouseDrag","curColor","outlineColor","componentDidMount","updateCanvas","componentDidUpdate","canvas","current","context","getContext","mask","size","color","undefined","width","height","clearRect","getMousePos","e","color_canvas","getBoundingClientRect","left","top","setState","prevState","mouseX","Math","round","pageX","document","body","scrollLeft","documentElement","mouseY","pageY","scrollTop","clickMouse","event","x","y","console","log","dragStart","dragOver","dragEnd","paintAt","startX","startY","render","zIndex","position","backgroundColor","createColorImage","mask_matrix","JSON","parse","outlineLayerData","createImageData","outlineImage","data","len","length","col","row","pixel","i","outline_matrix","String","putImageData"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nclass ColorCanvas extends Component {\n\n    constructor (props){\n        super(props);\n        this.canvasRef = React.createRef();\n        this.state = {\n            drawingAreaX: 0,\n            drawingAreaY: 0,\n            clusterID: 0,\n            clusterList: [],\n            pointList: [],\n            draggedPointList: [],\n            draggedMaskPointList: [],\n            mouseDrag: false,\n            curColor: [255, 0, 0],\n            outlineColor: [0, 0, 0, 127]\n\n        }\n    }\n\n    componentDidMount() {\n        this.updateCanvas();\n    }\n\n    componentDidUpdate() {\n        this.updateCanvas();\n    }\n\n    updateCanvas() {\n        const canvas = this.canvasRef.current;\n        const context = canvas.getContext('2d');\n        const { mask, size, color } = this.props;\n\n        //console.log(size);\n        // eslint-disable-next-line\n        if (mask != undefined && size != undefined && color != undefined){\n            context.canvas.width = size[0];\n            context.canvas.height = size[1];\n            context.clearRect(0,0, size[0], size[1]);\n\n            // draw children “components”\n            // crea colorImage\n            // fai get delle annotazioni esistenti\n            // e disegnale\n            // createColorImage({context, boundaries, size, color});\n\n        }\n    }\n\n    getMousePos(e){\n       let color_canvas = this.canvasRef.current;\n\n       let drawingAreaX = color_canvas.getBoundingClientRect().left;\n       let drawingAreaY = color_canvas.getBoundingClientRect().top;\n\n        // get color_canvas position\n        this.setState(prevState =>{\n            return {\n                drawingAreaX: drawingAreaX,\n                drawingAreaY: drawingAreaY\n            }\n        })\n\n        // mouse click coordinates on the canvas rounded to manage float case\n        let mouseX = Math.round(e.pageX - document.body.scrollLeft - document.documentElement.scrollLeft - drawingAreaX),\n            mouseY = Math.round(e.pageY - document.body.scrollTop - document.documentElement.scrollTop - drawingAreaY);\n\n        return [mouseX, mouseY];\n    }\n\n    clickMouse(event){\n        let [x, y] = this.getMousePos(event);\n\n        console.log(\"x: \" + x + \", y: \" + y);\n\n        //paintAt(x, y);\n\n    }\n\n    dragStart(event){\n        //TODO\n    }\n\n    dragOver(event){\n        //TODO\n    }\n\n    dragEnd(event){\n        //TODO\n    }\n\n    paintAt(startX, startY){\n        const { size, color } = this.props;\n\n        if(size != undefined && color != undefined){\n\n            /*\n            // takes pixel RGBA color\n            let pixelPos = (startY * size[0] + startX) * 4,\n                r = colorImage[pixelPos],\n                g = colorImage[pixelPos + 1],\n                b = colorImage[pixelPos + 2],\n                a = colorImage[pixelPos + 3];\n\n            // console.log(\"pixelPos: \" + pixelPos);\n            //console.log(\"r: \" + r + \", g: \" + g + \", b: \" + b + \", a: \" + a);\n            //console.log(\"curColor[0] : \" + curColor[0]  + \", curColor[1] : \" + curColor[1] + \", curColor[2] : \" + curColor[2]  + \", curColor[3] : \" + curColor[3] );\n\n\n            // return if you try to recolor the area with the same color and the same opacity\n            if (r == curColor[0] && g == curColor[1] && b == curColor[2] && a == curColor[3]){\n\n                floodFill(startX, startY, r, g, b, a, [0, 0, 0, 0]);\n                redraw();\n\n                // delete the element from clusterList and pointList\n                clusterList.splice( clusterList.indexOf(mask[startY][startX]), 1 );\n                pointList.splice( clusterList.indexOf(mask[startY][startX]), 1);\n\n                return\n            }\n\n            // call floodFill method and pass to it initial (x,y) and initial RGBA of the pixel clicked\n            floodFill(startX, startY, r, g, b, a, curColor);\n            redraw();\n\n            clusterList.push(mask[startY][startX]);\n            pointList.push([startX, startY]);\n\n\n             */\n        }\n     \n    }\n\n\n    \n   render() {\n        return(\n            <canvas id=\"color\"\n                    ref={this.canvasRef}\n                    style={{ zIndex: 3, position:'absolute', backgroundColor:'rgba(255,0,0,0.45)'}}\n                    onClick={(event) => this.clickMouse(event)}\n                    onDragStart={(event) => this.dragStart(event)}\n                    onDragOver={(event) => this.dragOver(event)}\n                    onDragEnd={(event) => this.dragEnd(event)}\n\n            >\n                Sorry, your browser doesn't support the &lt;canvas&gt; element. \n            </canvas> \n        )\n\n    \n    \n    \n    }\n    \n}\nexport default ColorCanvas;\n\nfunction createColorImage(props) {\n    const {context, size, mask, color} = props;\n    let mask_matrix = JSON.parse(mask);\n\n    // console.log(outline_matrix[0][0]);\n\n    let outlineLayerData = context.createImageData(size[0], size[1]);\n    let outlineImage = outlineLayerData.data;\n    // scroll the matrix with boundaries to create the outline image\n    let len = outlineLayerData.data.length;\n    // console.log(len);\n    let col = 0, row = 0;\n    let pixel = [];\n    for (let i = 0; i < len && row < size[1]; i += 4) {\n        pixel = outline_matrix[row][col];\n        // console.log(\"pixel: \" + pixel);\n        if (String(pixel[0]) === '0') {\n            outlineImage[i] = color[0];       // r\n            outlineImage[i + 1] = color[1];   // g\n            outlineImage[i + 2] = color[2];   // b\n            outlineImage[i + 3] = color[3];   // a\n        }\n        if (col === size[0] - 1) {\n            row++;\n            col = 0;\n        } else {\n            col++;\n        }\n\n    }\n\n    // draw the outline layer in the 3° canvas\n    context.putImageData(outlineLayerData, 0, 0);\n\n\n}"]},"metadata":{},"sourceType":"module"}