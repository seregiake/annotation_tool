{"ast":null,"code":"var _jsxFileName = \"/Users/serenagiachetti/Desktop/projects/annotation_tool/frontend/src/components/ColorCanvas.js\";\nimport React, { Component } from 'react';\n\nclass ColorCanvas extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.state = {\n      drawingAreaX: 0,\n      drawingAreaY: 0,\n      clusterID: 0,\n      clusterList: [],\n      pointList: [],\n      draggedPointList: [],\n      draggedMaskPointList: [],\n      mouseDrag: false,\n      curColor: [255, 0, 0],\n      outlineColor: [0, 0, 0, 127]\n    };\n  }\n\n  componentDidMount() {\n    this.updateCanvas();\n  }\n\n  componentDidUpdate() {\n    this.updateCanvas();\n  }\n\n  updateCanvas() {\n    const canvas = this.refs.outline;\n    const context = canvas.getContext('2d');\n    const {\n      mask,\n      size,\n      color\n    } = this.props; //console.log(size);\n    // eslint-disable-next-line\n\n    if (mask != undefined && size != undefined && color != undefined) {\n      context.canvas.width = size[0];\n      context.canvas.height = size[1];\n      context.clearRect(0, 0, size[0], size[1]); // draw children “components”\n      // fai get delle annotazioni esistenti\n      // e disegnale\n      // outline({context, boundaries, size, color});\n    }\n  }\n\n  getMousePos(e) {\n    let color_canvas = this.canvasRef.current;\n    let drawingAreaX = color_canvas.getBoundingClientRect().left;\n    let drawingAreaY = color_canvas.getBoundingClientRect().top; // get color_canvas position\n\n    this.setState(prevState => {\n      return {\n        drawingAreaX: drawingAreaX,\n        drawingAreaY: drawingAreaY\n      };\n    }); // mouse click coordinates on the canvas rounded to manage float case\n\n    let mouseX = Math.round(e.pageX - document.body.scrollLeft - document.documentElement.scrollLeft - drawingAreaX),\n        mouseY = Math.round(e.pageY - document.body.scrollTop - document.documentElement.scrollTop - drawingAreaY);\n    return [mouseX, mouseY];\n  }\n\n  clickMouse(event) {\n    let [x, y] = this.getMousePos(event);\n    console.log(\"x: \" + x + \", y: \" + y); //paintAt(x, y);\n  }\n\n  dragStart(event) {//TODO\n  }\n\n  dragOver(event) {//TODO\n  }\n\n  dragEnd(event) {} //TODO\n\n  /*\n  paintAt(x, y){\n       takeSelectedColor(\"ann_color_box\");\n       // takes opacity\n      // let ann_opacity = document.getElementById(\"ann_opacity\");\n      // curColor[3] = Math.round(((ann_opacity.value * 255)/100));\n       // takes pixel RGBA color\n      let pixelPos = (startY * canvasWidth + startX) * 4,\n          r = colorImage[pixelPos],\n          g = colorImage[pixelPos + 1],\n          b = colorImage[pixelPos + 2],\n          a = colorImage[pixelPos + 3];\n       // console.log(\"pixelPos: \" + pixelPos);\n      //console.log(\"r: \" + r + \", g: \" + g + \", b: \" + b + \", a: \" + a);\n      //console.log(\"curColor[0] : \" + curColor[0]  + \", curColor[1] : \" + curColor[1] + \", curColor[2] : \" + curColor[2]  + \", curColor[3] : \" + curColor[3] );\n        // return if you try to recolor the area with the same color and the same opacity\n      if (r == curColor[0] && g == curColor[1] && b == curColor[2] && a == curColor[3]){\n           floodFill(startX, startY, r, g, b, a, [0, 0, 0, 0]);\n          redraw();\n           // delete the element from clusterList and pointList\n          clusterList.splice( clusterList.indexOf(mask[startY][startX]), 1 );\n          pointList.splice( clusterList.indexOf(mask[startY][startX]), 1);\n           return\n      }\n          // call floodFill method and pass to it initial (x,y) and initial RGBA of the pixel clicked\n      floodFill(startX, startY, r, g, b, a, curColor);\n      redraw();\n       clusterList.push(mask[startY][startX]);\n      pointList.push([startX, startY]);\n  }\n  */\n\n\n  render() {\n    if (this.props.size !== undefined) {\n      const {\n        size\n      } = this.props;\n      this.loadImage(size);\n    }\n\n    return React.createElement(\"canvas\", {\n      id: \"color\",\n      ref: this.canvasRef,\n      style: {\n        zIndex: 3,\n        position: 'absolute',\n        backgroundColor: 'red'\n      },\n      onClick: event => this.clickMouse(event),\n      onDragStart: event => this.dragStart(event),\n      onDragOver: event => this.dragOver(event),\n      onDragEnd: event => this.dragEnd(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"Sorry, your browser doesn't support the <canvas> element.\");\n  }\n\n}\n\nexport default ColorCanvas;","map":{"version":3,"sources":["/Users/serenagiachetti/Desktop/projects/annotation_tool/frontend/src/components/ColorCanvas.js"],"names":["React","Component","ColorCanvas","constructor","props","canvasRef","createRef","state","drawingAreaX","drawingAreaY","clusterID","clusterList","pointList","draggedPointList","draggedMaskPointList","mouseDrag","curColor","outlineColor","componentDidMount","updateCanvas","componentDidUpdate","canvas","refs","outline","context","getContext","mask","size","color","undefined","width","height","clearRect","getMousePos","e","color_canvas","current","getBoundingClientRect","left","top","setState","prevState","mouseX","Math","round","pageX","document","body","scrollLeft","documentElement","mouseY","pageY","scrollTop","clickMouse","event","x","y","console","log","dragStart","dragOver","dragEnd","render","loadImage","zIndex","position","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nclass ColorCanvas extends Component {\n\n    constructor (props){\n        super(props);\n        this.canvasRef = React.createRef();\n        this.state = {\n            drawingAreaX: 0,\n            drawingAreaY: 0,\n            clusterID: 0,\n            clusterList: [],\n            pointList: [],\n            draggedPointList: [],\n            draggedMaskPointList: [],\n            mouseDrag: false,\n            curColor: [255, 0, 0],\n            outlineColor: [0, 0, 0, 127]\n\n        }\n    }\n\n    componentDidMount() {\n        this.updateCanvas();\n    }\n\n    componentDidUpdate() {\n        this.updateCanvas();\n    }\n\n    updateCanvas() {\n        const canvas = this.refs.outline;\n        const context = canvas.getContext('2d');\n        const { mask, size, color } = this.props;\n\n        //console.log(size);\n        // eslint-disable-next-line\n        if (mask != undefined && size != undefined && color != undefined){\n            context.canvas.width = size[0];\n            context.canvas.height = size[1];\n            context.clearRect(0,0, size[0], size[1]);\n\n            // draw children “components”\n            // fai get delle annotazioni esistenti\n            // e disegnale\n            // outline({context, boundaries, size, color});\n\n        }\n    }\n\n    getMousePos(e){\n       let color_canvas = this.canvasRef.current;\n\n       let drawingAreaX = color_canvas.getBoundingClientRect().left;\n       let drawingAreaY = color_canvas.getBoundingClientRect().top;\n\n        // get color_canvas position\n        this.setState(prevState =>{\n            return {\n                drawingAreaX: drawingAreaX,\n                drawingAreaY: drawingAreaY\n            }\n        })\n\n        // mouse click coordinates on the canvas rounded to manage float case\n        let mouseX = Math.round(e.pageX - document.body.scrollLeft - document.documentElement.scrollLeft - drawingAreaX),\n            mouseY = Math.round(e.pageY - document.body.scrollTop - document.documentElement.scrollTop - drawingAreaY);\n\n        return [mouseX, mouseY];\n    }\n\n    clickMouse(event){\n        let [x, y] = this.getMousePos(event);\n\n        console.log(\"x: \" + x + \", y: \" + y);\n\n        //paintAt(x, y);\n\n    }\n\n    dragStart(event){\n        //TODO\n    }\n\n    dragOver(event){\n        //TODO\n    }\n\n    dragEnd(event){\n        //TODO\n    }\n\n    /*\n    paintAt(x, y){\n\n        takeSelectedColor(\"ann_color_box\");\n\n        // takes opacity\n        // let ann_opacity = document.getElementById(\"ann_opacity\");\n        // curColor[3] = Math.round(((ann_opacity.value * 255)/100));\n\n        // takes pixel RGBA color\n        let pixelPos = (startY * canvasWidth + startX) * 4,\n            r = colorImage[pixelPos],\n            g = colorImage[pixelPos + 1],\n            b = colorImage[pixelPos + 2],\n            a = colorImage[pixelPos + 3];\n\n        // console.log(\"pixelPos: \" + pixelPos);\n        //console.log(\"r: \" + r + \", g: \" + g + \", b: \" + b + \", a: \" + a);\n        //console.log(\"curColor[0] : \" + curColor[0]  + \", curColor[1] : \" + curColor[1] + \", curColor[2] : \" + curColor[2]  + \", curColor[3] : \" + curColor[3] );\n\n\n        // return if you try to recolor the area with the same color and the same opacity\n        if (r == curColor[0] && g == curColor[1] && b == curColor[2] && a == curColor[3]){\n\n            floodFill(startX, startY, r, g, b, a, [0, 0, 0, 0]);\n            redraw();\n\n            // delete the element from clusterList and pointList\n            clusterList.splice( clusterList.indexOf(mask[startY][startX]), 1 );\n            pointList.splice( clusterList.indexOf(mask[startY][startX]), 1);\n\n            return\n        }\n\n\n\n\n        // call floodFill method and pass to it initial (x,y) and initial RGBA of the pixel clicked\n        floodFill(startX, startY, r, g, b, a, curColor);\n        redraw();\n\n        clusterList.push(mask[startY][startX]);\n        pointList.push([startX, startY]);\n    }\n    */\n\n    \n   render() {\n   \n    if (this.props.size !==undefined) {\n        const { size } = this.props;\n        this.loadImage(size);\n        \n    } \n\n        return(\n            <canvas id=\"color\"\n                    ref={this.canvasRef}\n                    style={{ zIndex: 3, position:'absolute', backgroundColor:'red'}}\n                    onClick={(event) => this.clickMouse(event)}\n                    onDragStart={(event) => this.dragStart(event)}\n                    onDragOver={(event) => this.dragOver(event)}\n                    onDragEnd={(event) => this.dragEnd(event)}\n\n            >\n                Sorry, your browser doesn't support the &lt;canvas&gt; element. \n            </canvas> \n        )\n\n    \n    \n    \n    }\n    \n}\nexport default ColorCanvas;"]},"metadata":{},"sourceType":"module"}