{"ast":null,"code":"var _jsxFileName = \"/Users/serenagiachetti/Desktop/projects/annotation_tool/frontend/src/components/OutlineCanvas.js\";\nimport React, { Component } from 'react';\n\nclass OutlineCanvas extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.updateCanvas();\n  }\n\n  componentDidUpdate() {\n    this.updateCanvas();\n  }\n\n  updateCanvas() {\n    const context = this.refs.outline.getContext('2d');\n    context.clearRect(0, 0, 300, 300); // draw children “components”\n\n    rect({\n      context,\n      x: 10,\n      y: 10,\n      width: 50,\n      height: 50\n    });\n    rect({\n      context,\n      x: 110,\n      y: 110,\n      width: 50,\n      height: 50\n    }); //drawMask({ctx, x: 110, y: 110, width: 50, height: 50})\n  }\n\n  render() {\n    if (this.props.boundaries !== \"Mask doesn't exist\" && this.props.size !== undefined) {\n      const {\n        boundaries,\n        size\n      } = this.props; //this.drawMask(boundaries, size, this.canvasRef );\n    }\n\n    return React.createElement(\"canvas\", {\n      id: \"outline\",\n      ref: \"outline\",\n      style: {\n        zIndex: 3,\n        position: 'relative',\n        backgroundColor: 'rgba(0, 255, 0, 0.3 )'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"Sorry, your browser doesn't support the <canvas> element.\");\n  }\n\n}\n\nexport default OutlineCanvas;\n\nfunction rect(props) {\n  const {\n    context,\n    x,\n    y,\n    width,\n    height\n  } = props;\n  context.fillRect(x, y, width, height);\n}\n\nfunction drawMask(props) {\n  const {\n    context,\n    size,\n    boundaries\n  } = props; //const canvas = this.refs.canvas;\n  //const context = canvas.getContext('2d');\n\n  context.canvas.width = size[0];\n  context.canvas.height = size[1];\n  let outlineLayerData = context.createImageData(size[0], size[1]);\n  let outlineImage = outlineLayerData.data; // scroll the matrix with boundaries to create the outline image\n\n  let len = outlineLayerData.data.length; // console.log(len);\n\n  let col = 0,\n      row = 0;\n  let pixel = [];\n\n  for (let i = 0; i < len && row < size[1]; i += 4) {\n    pixel = boundaries[row][col]; // console.log(\"pixel: \" + pixel);\n\n    if (pixel[0] == \"0\") {\n      outlineImage[i] = boundaries[0]; // r\n\n      outlineImage[i + 1] = boundaries[1]; // g\n\n      outlineImage[i + 2] = boundaries[2]; // b\n\n      outlineImage[i + 3] = boundaries[3]; // a\n    }\n\n    if (col == size[0] - 1) {\n      row++;\n      col = 0;\n    } else {\n      col++;\n    }\n  } // draw the outline layer in the 3° canvas\n\n\n  context.putImageData(outlineLayerData, 0, 0);\n}","map":{"version":3,"sources":["/Users/serenagiachetti/Desktop/projects/annotation_tool/frontend/src/components/OutlineCanvas.js"],"names":["React","Component","OutlineCanvas","constructor","props","componentDidMount","updateCanvas","componentDidUpdate","context","refs","outline","getContext","clearRect","rect","x","y","width","height","render","boundaries","size","undefined","zIndex","position","backgroundColor","fillRect","drawMask","canvas","outlineLayerData","createImageData","outlineImage","data","len","length","col","row","pixel","i","putImageData"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AACA,MAAMC,aAAN,SAA4BD,SAA5B,CAAsC;AAElCE,EAAAA,WAAW,CAAEC,KAAF,EAAQ;AACf,UAAMA,KAAN;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,YAAL;AACH;;AAEDC,EAAAA,kBAAkB,GAAG;AACjB,SAAKD,YAAL;AACH;;AAEDA,EAAAA,YAAY,GAAG;AACX,UAAME,OAAO,GAAG,KAAKC,IAAL,CAAUC,OAAV,CAAkBC,UAAlB,CAA6B,IAA7B,CAAhB;AACAH,IAAAA,OAAO,CAACI,SAAR,CAAkB,CAAlB,EAAoB,CAApB,EAAuB,GAAvB,EAA4B,GAA5B,EAFW,CAGX;;AACAC,IAAAA,IAAI,CAAC;AAACL,MAAAA,OAAD;AAAUM,MAAAA,CAAC,EAAE,EAAb;AAAiBC,MAAAA,CAAC,EAAE,EAApB;AAAwBC,MAAAA,KAAK,EAAE,EAA/B;AAAmCC,MAAAA,MAAM,EAAE;AAA3C,KAAD,CAAJ;AACAJ,IAAAA,IAAI,CAAC;AAACL,MAAAA,OAAD;AAAUM,MAAAA,CAAC,EAAE,GAAb;AAAkBC,MAAAA,CAAC,EAAE,GAArB;AAA0BC,MAAAA,KAAK,EAAE,EAAjC;AAAqCC,MAAAA,MAAM,EAAE;AAA7C,KAAD,CAAJ,CALW,CAMX;AACH;;AAGDC,EAAAA,MAAM,GAAG;AAET,QAAI,KAAKd,KAAL,CAAWe,UAAX,KAA0B,oBAA1B,IAAkD,KAAKf,KAAL,CAAWgB,IAAX,KAAmBC,SAAzE,EAAmF;AAC/E,YAAM;AAAEF,QAAAA,UAAF;AAAcC,QAAAA;AAAd,UAAuB,KAAKhB,KAAlC,CAD+E,CAE/E;AACH;;AAED,WACI;AAAQ,MAAA,EAAE,EAAC,SAAX;AAAqB,MAAA,GAAG,EAAC,SAAzB;AAAmC,MAAA,KAAK,EAAE;AAAEkB,QAAAA,MAAM,EAAE,CAAV;AAAaC,QAAAA,QAAQ,EAAC,UAAtB;AAAkCC,QAAAA,eAAe,EAAC;AAAlD,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mEADJ;AASC;;AAxCiC;;AA2CtC,eAAetB,aAAf;;AAEA,SAASW,IAAT,CAAcT,KAAd,EAAqB;AACjB,QAAM;AAACI,IAAAA,OAAD;AAAUM,IAAAA,CAAV;AAAaC,IAAAA,CAAb;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB,MAAiCb,KAAvC;AACAI,EAAAA,OAAO,CAACiB,QAAR,CAAiBX,CAAjB,EAAoBC,CAApB,EAAuBC,KAAvB,EAA8BC,MAA9B;AACH;;AAED,SAASS,QAAT,CAAkBtB,KAAlB,EAAwB;AACpB,QAAM;AAACI,IAAAA,OAAD;AAAUY,IAAAA,IAAV;AAAgBD,IAAAA;AAAhB,MAA8Bf,KAApC,CADoB,CAGhB;AACA;;AACAI,EAAAA,OAAO,CAACmB,MAAR,CAAeX,KAAf,GAAuBI,IAAI,CAAC,CAAD,CAA3B;AACAZ,EAAAA,OAAO,CAACmB,MAAR,CAAeV,MAAf,GAAwBG,IAAI,CAAC,CAAD,CAA5B;AAEA,MAAIQ,gBAAgB,GAAGpB,OAAO,CAACqB,eAAR,CAAwBT,IAAI,CAAC,CAAD,CAA5B,EAAiCA,IAAI,CAAC,CAAD,CAArC,CAAvB;AACA,MAAIU,YAAY,GAAGF,gBAAgB,CAACG,IAApC,CATgB,CAWhB;;AACA,MAAIC,GAAG,GAAGJ,gBAAgB,CAACG,IAAjB,CAAsBE,MAAhC,CAZgB,CAahB;;AACA,MAAIC,GAAG,GAAG,CAAV;AAAA,MAAaC,GAAG,GAAG,CAAnB;AACA,MAAIC,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,GAAJ,IAAWG,GAAG,GAAGf,IAAI,CAAC,CAAD,CAArC,EAA0CiB,CAAC,IAAI,CAA/C,EAAkD;AAC9CD,IAAAA,KAAK,GAAGjB,UAAU,CAACgB,GAAD,CAAV,CAAgBD,GAAhB,CAAR,CAD8C,CAE9C;;AACA,QAAIE,KAAK,CAAC,CAAD,CAAL,IAAY,GAAhB,EAAoB;AAChBN,MAAAA,YAAY,CAACO,CAAD,CAAZ,GAAkBlB,UAAU,CAAC,CAAD,CAA5B,CADgB,CACuB;;AACvCW,MAAAA,YAAY,CAACO,CAAC,GAAG,CAAL,CAAZ,GAAsBlB,UAAU,CAAC,CAAD,CAAhC,CAFgB,CAEuB;;AACvCW,MAAAA,YAAY,CAACO,CAAC,GAAG,CAAL,CAAZ,GAAsBlB,UAAU,CAAC,CAAD,CAAhC,CAHgB,CAGuB;;AACvCW,MAAAA,YAAY,CAACO,CAAC,GAAG,CAAL,CAAZ,GAAsBlB,UAAU,CAAC,CAAD,CAAhC,CAJgB,CAIuB;AAC1C;;AACD,QAAIe,GAAG,IAAId,IAAI,CAAC,CAAD,CAAJ,GAAU,CAArB,EAAuB;AACnBe,MAAAA,GAAG;AACHD,MAAAA,GAAG,GAAG,CAAN;AACH,KAHD,MAGO;AACHA,MAAAA,GAAG;AACN;AAEJ,GAhCe,CAkChB;;;AACA1B,EAAAA,OAAO,CAAC8B,YAAR,CAAqBV,gBAArB,EAAuC,CAAvC,EAA0C,CAA1C;AAEP","sourcesContent":["import React, { Component } from 'react';\nclass OutlineCanvas extends Component {\n\n    constructor (props){\n        super(props);\n    }\n\n    componentDidMount() {\n        this.updateCanvas();\n    }\n\n    componentDidUpdate() {\n        this.updateCanvas();\n    }\n\n    updateCanvas() {\n        const context = this.refs.outline.getContext('2d');\n        context.clearRect(0,0, 300, 300);\n        // draw children “components”\n        rect({context, x: 10, y: 10, width: 50, height: 50});\n        rect({context, x: 110, y: 110, width: 50, height: 50});\n        //drawMask({ctx, x: 110, y: 110, width: 50, height: 50})\n    }\n\n\n    render() {\n\n    if (this.props.boundaries !== \"Mask doesn't exist\" && this.props.size !==undefined){\n        const { boundaries, size } = this.props;\n        //this.drawMask(boundaries, size, this.canvasRef );\n    } \n\n    return(\n        <canvas id=\"outline\" ref=\"outline\" style={{ zIndex: 3, position:'relative', backgroundColor:'rgba(0, 255, 0, 0.3 )'}}>\n            Sorry, your browser doesn't support the &lt;canvas&gt; element.\n        </canvas>\n    )\n\n    \n    \n    \n    }\n    \n}\nexport default OutlineCanvas;\n\nfunction rect(props) {\n    const {context, x, y, width, height} = props;\n    context.fillRect(x, y, width, height);\n}\n\nfunction drawMask(props){\n    const {context, size, boundaries} = props;\n\n        //const canvas = this.refs.canvas;\n        //const context = canvas.getContext('2d');\n        context.canvas.width = size[0];\n        context.canvas.height = size[1];\n\n        let outlineLayerData = context.createImageData(size[0], size[1]);\n        let outlineImage = outlineLayerData.data;\n\n        // scroll the matrix with boundaries to create the outline image\n        let len = outlineLayerData.data.length;\n        // console.log(len);\n        let col = 0, row = 0;\n        let pixel = [];\n        for (let i = 0; i < len && row < size[1]; i += 4 ){\n            pixel = boundaries[row][col];\n            // console.log(\"pixel: \" + pixel);\n            if (pixel[0] == \"0\"){\n                outlineImage[i] = boundaries[0];       // r\n                outlineImage[i + 1] = boundaries[1];   // g\n                outlineImage[i + 2] = boundaries[2];   // b\n                outlineImage[i + 3] = boundaries[3];   // a\n            }\n            if (col == size[0] - 1){\n                row ++;\n                col = 0;\n            } else {\n                col++;\n            }\n\n        }\n\n        // draw the outline layer in the 3° canvas\n        context.putImageData(outlineLayerData, 0, 0 );\n\n}"]},"metadata":{},"sourceType":"module"}