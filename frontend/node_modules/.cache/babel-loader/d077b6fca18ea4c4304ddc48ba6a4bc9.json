{"ast":null,"code":"var _jsxFileName = \"/Users/serenagiachetti/Desktop/projects/annotation_tool/frontend/src/components/OutlineCanvas.js\";\nimport React, { Component } from 'react';\n\nclass OutlineCanvas extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n  }\n\n  loadImage(size) {\n    const canvas = this.canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.canvas.width = size[0];\n    context.canvas.height = size[1];\n  }\n\n  drawMask(boundaries, size) {\n    const canvas = this.canvasRef.current; // const context = canvas.getContext('2d');\n\n    const context = this.canvasRef;\n    context.canvas.width = size[0];\n    context.canvas.height = size[1];\n    let outlineLayerData = context.createImageData(size[0], size[1]);\n    let outlineImage = outlineLayerData.data; // scroll the matrix with boundaries to create the outline image\n\n    let len = outlineLayerData.data.length; // console.log(len);\n\n    let col = 0,\n        row = 0;\n    let pixel = [];\n\n    for (let i = 0; i < len && row < size[1]; i += 4) {\n      pixel = boundaries[row][col]; // console.log(\"pixel: \" + pixel);\n\n      if (pixel[0] == \"0\") {\n        outlineImage[i] = boundaries[0]; // r\n\n        outlineImage[i + 1] = boundaries[1]; // g\n\n        outlineImage[i + 2] = boundaries[2]; // b\n\n        outlineImage[i + 3] = boundaries[3]; // a\n      }\n\n      if (col == size[0] - 1) {\n        row++;\n        col = 0;\n      } else {\n        col++;\n      }\n    } // draw the outline layer in the 3° canvas\n\n\n    context.putImageData(outlineLayerData, 0, 0);\n  }\n\n  render() {\n    if (this.props.size !== undefined) {\n      const {\n        size\n      } = this.props;\n      this.loadImage(size);\n    }\n\n    if (this.props.boundaries !== \"Mask doesn't exist\") {\n      const {\n        boundaries,\n        size\n      } = this.props;\n      this.drawMask(boundaries, size);\n    }\n\n    return React.createElement(\"canvas\", {\n      id: \"outline\",\n      ref: this.canvasRef,\n      style: {\n        zIndex: 3,\n        position: 'relative',\n        backgroundColor: 'rgba(0, 255, 0, 0.3 )'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Sorry, your browser doesn't support the <canvas> element.\");\n  }\n\n}\n\nexport default OutlineCanvas;","map":{"version":3,"sources":["/Users/serenagiachetti/Desktop/projects/annotation_tool/frontend/src/components/OutlineCanvas.js"],"names":["React","Component","OutlineCanvas","constructor","props","canvasRef","createRef","loadImage","size","canvas","current","context","getContext","width","height","drawMask","boundaries","outlineLayerData","createImageData","outlineImage","data","len","length","col","row","pixel","i","putImageData","render","undefined","zIndex","position","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nclass OutlineCanvas extends Component {\n\n    constructor (props){\n        super(props);\n        this.canvasRef = React.createRef();\n    }\n\n    \n    loadImage(size){\n        const canvas = this.canvasRef.current;\n        const context = canvas.getContext('2d');\n        context.canvas.width = size[0];\n        context.canvas.height = size[1];\n        \n    }\n\n    drawMask(boundaries, size){\n        const canvas = this.canvasRef.current;\n        // const context = canvas.getContext('2d');\n        const context = this.canvasRef;\n\n        context.canvas.width = size[0];\n        context.canvas.height = size[1];\n\n        let outlineLayerData = context.createImageData(size[0], size[1]);\n        let outlineImage = outlineLayerData.data;\n\n        // scroll the matrix with boundaries to create the outline image\n        let len = outlineLayerData.data.length;\n        // console.log(len);\n        let col = 0, row = 0;\n        let pixel = [];\n        for (let i = 0; i < len && row < size[1]; i += 4 ){\n            pixel = boundaries[row][col];\n            // console.log(\"pixel: \" + pixel);\n            if (pixel[0] == \"0\"){\n                outlineImage[i] = boundaries[0];       // r\n                outlineImage[i + 1] = boundaries[1];   // g\n                outlineImage[i + 2] = boundaries[2];   // b\n                outlineImage[i + 3] = boundaries[3];   // a\n            }\n            if (col == size[0] - 1){\n                row ++;\n                col = 0;\n            } else {\n                col++;\n            }\n\n        }\n\n        // draw the outline layer in the 3° canvas\n        context.putImageData(outlineLayerData, 0, 0 );\n\n    }\n\n    \n   render() {\n   \n    if (this.props.size !==undefined) {\n        const { size } = this.props;\n        this.loadImage(size);\n        \n    }\n    if (this.props.boundaries !== \"Mask doesn't exist\"){\n        const { boundaries, size } = this.props;\n        this.drawMask(boundaries, size);\n    } \n\n        return(\n            <canvas id=\"outline\" ref={this.canvasRef} style={{ zIndex: 3, position:'relative', backgroundColor:'rgba(0, 255, 0, 0.3 )'}}>\n                Sorry, your browser doesn't support the &lt;canvas&gt; element. \n            </canvas>\n        )\n\n    \n    \n    \n    }\n    \n}\nexport default OutlineCanvas;"]},"metadata":{},"sourceType":"module"}