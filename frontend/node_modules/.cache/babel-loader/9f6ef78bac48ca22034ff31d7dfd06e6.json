{"ast":null,"code":"var _jsxFileName = \"/Users/serenagiachetti/Desktop/projects/annotation_tool/frontend/src/components/OutlineCanvas.js\";\nimport React, { Component } from 'react';\n\nclass OutlineCanvas extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n  }\n\n  loadImage(size) {\n    const canvas = this.canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.canvas.width = size[0];\n    context.canvas.height = size[1];\n  }\n\n  render() {\n    if (this.props.size !== undefined) {\n      const {\n        size\n      } = this.props;\n      this.loadImage(size);\n    }\n\n    if (this.props.boundaries !== \"Mask doesn't exist\" && this.props.size !== undefined) {\n      const {\n        boundaries,\n        size\n      } = this.props;\n      drawMask(boundaries, size, this.canvasRef);\n    }\n\n    return React.createElement(\"canvas\", {\n      id: \"outline\",\n      ref: this.canvasRef,\n      style: {\n        zIndex: 3,\n        position: 'relative',\n        backgroundColor: 'rgba(0, 255, 0, 0.3 )'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"Sorry, your browser doesn't support the <canvas> element.\");\n  }\n\n}\n\nexport default OutlineCanvas;\n\nfunction drawMask(boundaries, size, canvas) {\n  // const canvas = this.canvasRef.current;\n  // const context = canvas.getContext('2d');\n  const context = document.getElementById('outline').getContext('2d');\n  let outlineLayerData = context.createImageData(size[0], size[1]);\n  let outlineImage = outlineLayerData.data; // scroll the matrix with boundaries to create the outline image\n\n  let len = outlineLayerData.data.length; // console.log(len);\n\n  let col = 0,\n      row = 0;\n  let pixel = [];\n\n  for (let i = 0; i < len && row < size[1]; i += 4) {\n    pixel = boundaries[row][col]; // console.log(\"pixel: \" + pixel);\n\n    if (pixel[0] == \"0\") {\n      outlineImage[i] = boundaries[0]; // r\n\n      outlineImage[i + 1] = boundaries[1]; // g\n\n      outlineImage[i + 2] = boundaries[2]; // b\n\n      outlineImage[i + 3] = boundaries[3]; // a\n    }\n\n    if (col == size[0] - 1) {\n      row++;\n      col = 0;\n    } else {\n      col++;\n    }\n  } // draw the outline layer in the 3° canvas\n\n\n  context.putImageData(outlineLayerData, 0, 0);\n}","map":{"version":3,"sources":["/Users/serenagiachetti/Desktop/projects/annotation_tool/frontend/src/components/OutlineCanvas.js"],"names":["React","Component","OutlineCanvas","constructor","props","canvasRef","createRef","loadImage","size","canvas","current","context","getContext","width","height","render","undefined","boundaries","drawMask","zIndex","position","backgroundColor","document","getElementById","outlineLayerData","createImageData","outlineImage","data","len","length","col","row","pixel","i","putImageData"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nclass OutlineCanvas extends Component {\n\n    constructor (props){\n        super(props);\n        this.canvasRef = React.createRef();\n    }\n\n    \n    loadImage(size){\n        const canvas = this.canvasRef.current;\n        const context = canvas.getContext('2d');\n        context.canvas.width = size[0];\n        context.canvas.height = size[1];\n        \n    }\n\n   render() {\n   \n    if (this.props.size !==undefined) {\n        const { size } = this.props;\n        this.loadImage(size);\n        \n    }\n    if (this.props.boundaries !== \"Mask doesn't exist\" && this.props.size !==undefined){\n        const { boundaries, size } = this.props;\n        drawMask(boundaries, size, this.canvasRef );\n    } \n\n        return(\n            <canvas id=\"outline\" ref={this.canvasRef} style={{ zIndex: 3, position:'relative', backgroundColor:'rgba(0, 255, 0, 0.3 )'}}>\n                Sorry, your browser doesn't support the &lt;canvas&gt; element. \n            </canvas>\n        )\n\n    \n    \n    \n    }\n    \n}\nexport default OutlineCanvas;\n\n\n\nfunction drawMask(boundaries, size, canvas){\n        // const canvas = this.canvasRef.current;\n        // const context = canvas.getContext('2d');\n        const context = document.getElementById('outline').getContext('2d');\n\n        let outlineLayerData = context.createImageData(size[0], size[1]);\n        let outlineImage = outlineLayerData.data;\n\n        // scroll the matrix with boundaries to create the outline image\n        let len = outlineLayerData.data.length;\n        // console.log(len);\n        let col = 0, row = 0;\n        let pixel = [];\n        for (let i = 0; i < len && row < size[1]; i += 4 ){\n            pixel = boundaries[row][col];\n            // console.log(\"pixel: \" + pixel);\n            if (pixel[0] == \"0\"){\n                outlineImage[i] = boundaries[0];       // r\n                outlineImage[i + 1] = boundaries[1];   // g\n                outlineImage[i + 2] = boundaries[2];   // b\n                outlineImage[i + 3] = boundaries[3];   // a\n            }\n            if (col == size[0] - 1){\n                row ++;\n                col = 0;\n            } else {\n                col++;\n            }\n\n        }\n\n        // draw the outline layer in the 3° canvas\n        context.putImageData(outlineLayerData, 0, 0 );\n\n}"]},"metadata":{},"sourceType":"module"}