{"ast":null,"code":"var _jsxFileName = \"/Users/serenagiachetti/Desktop/projects/annotation_tool/frontend/src/components/OutlineCanvas.js\";\nimport React, { Component } from 'react';\n\nclass OutlineCanvas extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      boundaries: [],\n      size: []\n    };\n  }\n\n  componentDidMount() {\n    this.updateCanvas();\n  }\n\n  componentDidUpdate() {\n    this.drawMask();\n  }\n\n  updateCanvas() {\n    const canvas = this.refs.outline;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, 300, 300); // draw children “components”\n    // rect({context, x: 10, y: 10, width: 50, height: 50});\n    // rect({context, x: 110, y: 110, width: 50, height: 50});\n\n    const {\n      boundaries,\n      size\n    } = this.props;\n    console.log(boundaries);\n    console.log(size);\n    context.canvas.width = size[0];\n    context.canvas.height = size[1];\n    context.clearRect(0, 0, size[0], size[1]); //drawMask({ctx, x: 110, y: 110, width: 50, height: 50})\n  }\n\n  drawMask() {\n    //const {context, size, boundaries} = props;\n    console.log(\"update\");\n    const {\n      boundaries,\n      size\n    } = this.props; //console.log(boundaries);\n    //console.log(size);\n\n    /*\n    //const canvas = this.refs.canvas;\n    //const context = canvas.getContext('2d');\n    context.canvas.width = size[0];\n    context.canvas.height = size[1];\n     let outlineLayerData = context.createImageData(size[0], size[1]);\n    let outlineImage = outlineLayerData.data;\n     // scroll the matrix with boundaries to create the outline image\n    let len = outlineLayerData.data.length;\n    // console.log(len);\n    let col = 0, row = 0;\n    let pixel = [];\n    for (let i = 0; i < len && row < size[1]; i += 4 ){\n        pixel = boundaries[row][col];\n        // console.log(\"pixel: \" + pixel);\n        if (pixel[0] == \"0\"){\n            outlineImage[i] = boundaries[0];       // r\n            outlineImage[i + 1] = boundaries[1];   // g\n            outlineImage[i + 2] = boundaries[2];   // b\n            outlineImage[i + 3] = boundaries[3];   // a\n        }\n        if (col == size[0] - 1){\n            row ++;\n            col = 0;\n        } else {\n            col++;\n        }\n     }\n     // draw the outline layer in the 3° canvas\n    context.putImageData(outlineLayerData, 0, 0 );\n      */\n  }\n\n  render() {\n    if (this.props.boundaries !== \"Mask doesn't exist\" && this.props.size !== undefined) {\n      const {\n        boundaries,\n        size\n      } = this.props;\n      console.log(this.state);\n      this.componentDidUpdate(); //this.drawMask(boundaries, size, this.canvasRef );\n    }\n\n    return React.createElement(\"canvas\", {\n      id: \"outline\",\n      ref: \"outline\",\n      style: {\n        zIndex: 3,\n        position: 'relative',\n        backgroundColor: 'rgba(0, 255, 0, 0.3 )'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Sorry, your browser doesn't support the <canvas> element.\");\n  }\n\n}\n\nexport default OutlineCanvas;\n\nfunction rect(props) {\n  const {\n    context,\n    x,\n    y,\n    width,\n    height\n  } = props;\n  context.fillRect(x, y, width, height);\n}\n\nfunction drawMask(props) {\n  const {\n    context,\n    size,\n    boundaries\n  } = props; //const canvas = this.refs.canvas;\n  //const context = canvas.getContext('2d');\n\n  context.canvas.width = size[0];\n  context.canvas.height = size[1];\n  let outlineLayerData = context.createImageData(size[0], size[1]);\n  let outlineImage = outlineLayerData.data; // scroll the matrix with boundaries to create the outline image\n\n  let len = outlineLayerData.data.length; // console.log(len);\n\n  let col = 0,\n      row = 0;\n  let pixel = [];\n\n  for (let i = 0; i < len && row < size[1]; i += 4) {\n    pixel = boundaries[row][col]; // console.log(\"pixel: \" + pixel);\n\n    if (pixel[0] == \"0\") {\n      outlineImage[i] = boundaries[0]; // r\n\n      outlineImage[i + 1] = boundaries[1]; // g\n\n      outlineImage[i + 2] = boundaries[2]; // b\n\n      outlineImage[i + 3] = boundaries[3]; // a\n    }\n\n    if (col == size[0] - 1) {\n      row++;\n      col = 0;\n    } else {\n      col++;\n    }\n  } // draw the outline layer in the 3° canvas\n\n\n  context.putImageData(outlineLayerData, 0, 0);\n}","map":{"version":3,"sources":["/Users/serenagiachetti/Desktop/projects/annotation_tool/frontend/src/components/OutlineCanvas.js"],"names":["React","Component","OutlineCanvas","constructor","props","state","boundaries","size","componentDidMount","updateCanvas","componentDidUpdate","drawMask","canvas","refs","outline","context","getContext","clearRect","console","log","width","height","render","undefined","zIndex","position","backgroundColor","rect","x","y","fillRect","outlineLayerData","createImageData","outlineImage","data","len","length","col","row","pixel","i","putImageData"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nclass OutlineCanvas extends Component {\n\n    constructor (props){\n        super(props);\n        this.state = {\n            boundaries: [],\n            size: []\n        };\n    }\n\n    componentDidMount() {\n        this.updateCanvas();\n    }\n\n    componentDidUpdate() {\n        this.drawMask();\n    }\n\n    updateCanvas() {\n        const canvas = this.refs.outline;\n        const context = canvas.getContext('2d');\n        context.clearRect(0,0, 300, 300);\n        // draw children “components”\n        // rect({context, x: 10, y: 10, width: 50, height: 50});\n        // rect({context, x: 110, y: 110, width: 50, height: 50});\n\n        const { boundaries, size } = this.props;\n        console.log(boundaries);\n        console.log(size);\n\n        context.canvas.width = size[0];\n        context.canvas.height = size[1];\n        context.clearRect(0,0, size[0], size[1]);\n\n        //drawMask({ctx, x: 110, y: 110, width: 50, height: 50})\n    }\n\n    drawMask(){\n    //const {context, size, boundaries} = props;\n    console.log(\"update\");\n    const { boundaries, size } = this.props;\n    //console.log(boundaries);\n    //console.log(size);\n        /*\n        //const canvas = this.refs.canvas;\n        //const context = canvas.getContext('2d');\n        context.canvas.width = size[0];\n        context.canvas.height = size[1];\n\n        let outlineLayerData = context.createImageData(size[0], size[1]);\n        let outlineImage = outlineLayerData.data;\n\n        // scroll the matrix with boundaries to create the outline image\n        let len = outlineLayerData.data.length;\n        // console.log(len);\n        let col = 0, row = 0;\n        let pixel = [];\n        for (let i = 0; i < len && row < size[1]; i += 4 ){\n            pixel = boundaries[row][col];\n            // console.log(\"pixel: \" + pixel);\n            if (pixel[0] == \"0\"){\n                outlineImage[i] = boundaries[0];       // r\n                outlineImage[i + 1] = boundaries[1];   // g\n                outlineImage[i + 2] = boundaries[2];   // b\n                outlineImage[i + 3] = boundaries[3];   // a\n            }\n            if (col == size[0] - 1){\n                row ++;\n                col = 0;\n            } else {\n                col++;\n            }\n\n        }\n\n        // draw the outline layer in the 3° canvas\n        context.putImageData(outlineLayerData, 0, 0 );\n\n         */\n\n}\n\n    render() {\n\n    if (this.props.boundaries !== \"Mask doesn't exist\" && this.props.size !==undefined){\n        const { boundaries, size } = this.props;\n        console.log(this.state);\n        this.componentDidUpdate();\n        //this.drawMask(boundaries, size, this.canvasRef );\n    } \n\n    return(\n        <canvas id=\"outline\" ref=\"outline\" style={{ zIndex: 3, position:'relative', backgroundColor:'rgba(0, 255, 0, 0.3 )'}}>\n            Sorry, your browser doesn't support the &lt;canvas&gt; element.\n        </canvas>\n    )\n\n    \n    \n    \n    }\n    \n}\nexport default OutlineCanvas;\n\nfunction rect(props) {\n    const {context, x, y, width, height} = props;\n    context.fillRect(x, y, width, height);\n}\n\nfunction drawMask(props){\n    const {context, size, boundaries} = props;\n\n        //const canvas = this.refs.canvas;\n        //const context = canvas.getContext('2d');\n        context.canvas.width = size[0];\n        context.canvas.height = size[1];\n\n        let outlineLayerData = context.createImageData(size[0], size[1]);\n        let outlineImage = outlineLayerData.data;\n\n        // scroll the matrix with boundaries to create the outline image\n        let len = outlineLayerData.data.length;\n        // console.log(len);\n        let col = 0, row = 0;\n        let pixel = [];\n        for (let i = 0; i < len && row < size[1]; i += 4 ){\n            pixel = boundaries[row][col];\n            // console.log(\"pixel: \" + pixel);\n            if (pixel[0] == \"0\"){\n                outlineImage[i] = boundaries[0];       // r\n                outlineImage[i + 1] = boundaries[1];   // g\n                outlineImage[i + 2] = boundaries[2];   // b\n                outlineImage[i + 3] = boundaries[3];   // a\n            }\n            if (col == size[0] - 1){\n                row ++;\n                col = 0;\n            } else {\n                col++;\n            }\n\n        }\n\n        // draw the outline layer in the 3° canvas\n        context.putImageData(outlineLayerData, 0, 0 );\n\n}"]},"metadata":{},"sourceType":"module"}