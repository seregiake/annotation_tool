{"ast":null,"code":"var _jsxFileName = \"/Users/serenagiachetti/Desktop/projects/annotation_tool/frontend/src/components/OutlineCanvas.js\";\nimport React, { Component } from 'react';\n\nclass OutlineCanvas extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      boundaries: [],\n      size: []\n    };\n  }\n\n  componentDidMount() {\n    this.updateCanvas();\n  }\n\n  componentDidUpdate() {\n    this.updateCanvas();\n  }\n\n  updateCanvas() {\n    const canvas = this.refs.outline;\n    const context = canvas.getContext('2d');\n    const {\n      boundaries,\n      size\n    } = this.props; //console.log(size);\n\n    if (boundaries != undefined && size != undefined) {\n      context.canvas.width = size[0];\n      context.canvas.height = size[1];\n      context.clearRect(0, 0, size[0], size[1]); // draw children “components”\n\n      outline({\n        context,\n        boundaries,\n        size\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"canvas\", {\n      id: \"outline\",\n      ref: \"outline\",\n      style: {\n        zIndex: 3,\n        position: 'relative'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Sorry, your browser doesn't support the <canvas> element.\");\n  }\n\n}\n\nexport default OutlineCanvas;\n\nfunction outline(props) {\n  const {\n    context,\n    size,\n    boundaries\n  } = props;\n  let outline_matrix = JSON.parse(boundaries); // console.log(outline_matrix[0][0]);\n\n  let outlineLayerData = context.createImageData(size[0], size[1]);\n  let outlineImage = outlineLayerData.data; // scroll the matrix with boundaries to create the outline image\n\n  let len = outlineLayerData.data.length; // console.log(len);\n\n  let col = 0,\n      row = 0;\n  let pixel = [];\n\n  for (let i = 0; i < len && row < size[1]; i += 4) {\n    pixel = outline_matrix[row][col]; // console.log(\"pixel: \" + pixel);\n\n    if (String(pixel[0]) === '0') {\n      outlineImage[i] = 0; // r\n\n      outlineImage[i + 1] = 0; // g\n\n      outlineImage[i + 2] = 0; // b\n\n      outlineImage[i + 3] = 150; // a\n    }\n\n    if (col === size[0] - 1) {\n      row++;\n      col = 0;\n    } else {\n      col++;\n    }\n  } // draw the outline layer in the 3° canvas\n\n\n  context.putImageData(outlineLayerData, 0, 0);\n}","map":{"version":3,"sources":["/Users/serenagiachetti/Desktop/projects/annotation_tool/frontend/src/components/OutlineCanvas.js"],"names":["React","Component","OutlineCanvas","constructor","props","state","boundaries","size","componentDidMount","updateCanvas","componentDidUpdate","canvas","refs","outline","context","getContext","undefined","width","height","clearRect","render","zIndex","position","outline_matrix","JSON","parse","outlineLayerData","createImageData","outlineImage","data","len","length","col","row","pixel","i","String","putImageData"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nclass OutlineCanvas extends Component {\n\n    constructor (props){\n        super(props);\n        this.state = {\n            boundaries: [],\n            size: []\n        };\n    }\n\n    componentDidMount() {\n        this.updateCanvas();\n    }\n\n    componentDidUpdate() {\n        this.updateCanvas();\n    }\n\n    updateCanvas() {\n        const canvas = this.refs.outline;\n        const context = canvas.getContext('2d');\n        const { boundaries, size } = this.props;\n\n        //console.log(size);\n\n        if (boundaries != undefined && size != undefined){\n            context.canvas.width = size[0];\n            context.canvas.height = size[1];\n            context.clearRect(0,0, size[0], size[1]);\n\n            // draw children “components”\n            outline({context, boundaries, size});\n\n        }\n    }\n\n    render() {\n\n    return(\n        <canvas id=\"outline\" ref=\"outline\" style={{ zIndex: 3, position:'relative'}}>\n            Sorry, your browser doesn't support the &lt;canvas&gt; element.\n        </canvas>\n    )\n\n    \n    \n    \n    }\n    \n}\nexport default OutlineCanvas;\n\nfunction outline(props) {\n    const {context, size, boundaries} = props;\n    let outline_matrix = JSON.parse(boundaries);\n    // console.log(outline_matrix[0][0]);\n\n    let outlineLayerData = context.createImageData(size[0], size[1]);\n    let outlineImage = outlineLayerData.data;\n    // scroll the matrix with boundaries to create the outline image\n    let len = outlineLayerData.data.length;\n    // console.log(len);\n    let col = 0, row = 0;\n    let pixel = [];\n    for (let i = 0; i < len && row < size[1]; i += 4) {\n        pixel = outline_matrix[row][col];\n        // console.log(\"pixel: \" + pixel);\n        if (String(pixel[0]) === '0') {\n            outlineImage[i] = 0;       // r\n            outlineImage[i + 1] = 0;   // g\n            outlineImage[i + 2] = 0;   // b\n            outlineImage[i + 3] = 150;   // a\n        }\n        if (col === size[0] - 1) {\n            row++;\n            col = 0;\n        } else {\n            col++;\n        }\n\n    }\n\n    // draw the outline layer in the 3° canvas\n    context.putImageData(outlineLayerData, 0, 0);\n\n\n}"]},"metadata":{},"sourceType":"module"}