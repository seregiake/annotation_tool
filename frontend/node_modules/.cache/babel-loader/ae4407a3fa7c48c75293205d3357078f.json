{"ast":null,"code":"var _jsxFileName = \"/Users/serenagiachetti/Desktop/projects/annotation_tool/frontend/src/components/OutlineCanvas.js\";\nimport React, { Component } from 'react';\n\nclass OutlineCanvas extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      boundaries: [],\n      size: []\n    };\n  }\n\n  componentDidMount() {\n    this.updateCanvas();\n  }\n\n  componentDidUpdate() {\n    this.drawMask();\n  }\n\n  updateCanvas() {\n    const context = this.refs.outline.getContext('2d');\n    context.clearRect(0, 0, 300, 300); // draw children “components”\n\n    rect({\n      context,\n      x: 10,\n      y: 10,\n      width: 50,\n      height: 50\n    });\n    rect({\n      context,\n      x: 110,\n      y: 110,\n      width: 50,\n      height: 50\n    });\n    const {\n      boundaries,\n      size\n    } = this.props;\n    console.log(boundaries);\n    console.log(size); //drawMask({ctx, x: 110, y: 110, width: 50, height: 50})\n  }\n\n  drawMask(props) {\n    const {\n      context,\n      size,\n      boundaries\n    } = props; //const canvas = this.refs.canvas;\n    //const context = canvas.getContext('2d');\n\n    context.canvas.width = size[0];\n    context.canvas.height = size[1];\n    let outlineLayerData = context.createImageData(size[0], size[1]);\n    let outlineImage = outlineLayerData.data; // scroll the matrix with boundaries to create the outline image\n\n    let len = outlineLayerData.data.length; // console.log(len);\n\n    let col = 0,\n        row = 0;\n    let pixel = [];\n\n    for (let i = 0; i < len && row < size[1]; i += 4) {\n      pixel = boundaries[row][col]; // console.log(\"pixel: \" + pixel);\n\n      if (pixel[0] == \"0\") {\n        outlineImage[i] = boundaries[0]; // r\n\n        outlineImage[i + 1] = boundaries[1]; // g\n\n        outlineImage[i + 2] = boundaries[2]; // b\n\n        outlineImage[i + 3] = boundaries[3]; // a\n      }\n\n      if (col == size[0] - 1) {\n        row++;\n        col = 0;\n      } else {\n        col++;\n      }\n    } // draw the outline layer in the 3° canvas\n\n\n    context.putImageData(outlineLayerData, 0, 0);\n  }\n\n  render() {\n    if (this.props.boundaries !== \"Mask doesn't exist\" && this.props.size !== undefined) {\n      const {\n        boundaries,\n        size\n      } = this.props;\n      console.log(this.state); //this.drawMask(boundaries, size, this.canvasRef );\n    }\n\n    return React.createElement(\"canvas\", {\n      id: \"outline\",\n      ref: \"outline\",\n      style: {\n        zIndex: 3,\n        position: 'relative',\n        backgroundColor: 'rgba(0, 255, 0, 0.3 )'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Sorry, your browser doesn't support the <canvas> element.\");\n  }\n\n}\n\nexport default OutlineCanvas;\n\nfunction rect(props) {\n  const {\n    context,\n    x,\n    y,\n    width,\n    height\n  } = props;\n  context.fillRect(x, y, width, height);\n}\n\nfunction drawMask(props) {\n  const {\n    context,\n    size,\n    boundaries\n  } = props; //const canvas = this.refs.canvas;\n  //const context = canvas.getContext('2d');\n\n  context.canvas.width = size[0];\n  context.canvas.height = size[1];\n  let outlineLayerData = context.createImageData(size[0], size[1]);\n  let outlineImage = outlineLayerData.data; // scroll the matrix with boundaries to create the outline image\n\n  let len = outlineLayerData.data.length; // console.log(len);\n\n  let col = 0,\n      row = 0;\n  let pixel = [];\n\n  for (let i = 0; i < len && row < size[1]; i += 4) {\n    pixel = boundaries[row][col]; // console.log(\"pixel: \" + pixel);\n\n    if (pixel[0] == \"0\") {\n      outlineImage[i] = boundaries[0]; // r\n\n      outlineImage[i + 1] = boundaries[1]; // g\n\n      outlineImage[i + 2] = boundaries[2]; // b\n\n      outlineImage[i + 3] = boundaries[3]; // a\n    }\n\n    if (col == size[0] - 1) {\n      row++;\n      col = 0;\n    } else {\n      col++;\n    }\n  } // draw the outline layer in the 3° canvas\n\n\n  context.putImageData(outlineLayerData, 0, 0);\n}","map":{"version":3,"sources":["/Users/serenagiachetti/Desktop/projects/annotation_tool/frontend/src/components/OutlineCanvas.js"],"names":["React","Component","OutlineCanvas","constructor","props","state","boundaries","size","componentDidMount","updateCanvas","componentDidUpdate","drawMask","context","refs","outline","getContext","clearRect","rect","x","y","width","height","console","log","canvas","outlineLayerData","createImageData","outlineImage","data","len","length","col","row","pixel","i","putImageData","render","undefined","zIndex","position","backgroundColor","fillRect"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nclass OutlineCanvas extends Component {\n\n    constructor (props){\n        super(props);\n        this.state = {\n            boundaries: [],\n            size: []\n        };\n    }\n\n    componentDidMount() {\n        this.updateCanvas();\n    }\n\n    componentDidUpdate() {\n        this.drawMask();\n    }\n\n    updateCanvas() {\n        const context = this.refs.outline.getContext('2d');\n        context.clearRect(0,0, 300, 300);\n        // draw children “components”\n        rect({context, x: 10, y: 10, width: 50, height: 50});\n        rect({context, x: 110, y: 110, width: 50, height: 50});\n\n        const { boundaries, size } = this.props;\n        console.log(boundaries);\n        console.log(size);\n\n        //drawMask({ctx, x: 110, y: 110, width: 50, height: 50})\n    }\n\n    drawMask(props){\n    const {context, size, boundaries} = props;\n\n        //const canvas = this.refs.canvas;\n        //const context = canvas.getContext('2d');\n        context.canvas.width = size[0];\n        context.canvas.height = size[1];\n\n        let outlineLayerData = context.createImageData(size[0], size[1]);\n        let outlineImage = outlineLayerData.data;\n\n        // scroll the matrix with boundaries to create the outline image\n        let len = outlineLayerData.data.length;\n        // console.log(len);\n        let col = 0, row = 0;\n        let pixel = [];\n        for (let i = 0; i < len && row < size[1]; i += 4 ){\n            pixel = boundaries[row][col];\n            // console.log(\"pixel: \" + pixel);\n            if (pixel[0] == \"0\"){\n                outlineImage[i] = boundaries[0];       // r\n                outlineImage[i + 1] = boundaries[1];   // g\n                outlineImage[i + 2] = boundaries[2];   // b\n                outlineImage[i + 3] = boundaries[3];   // a\n            }\n            if (col == size[0] - 1){\n                row ++;\n                col = 0;\n            } else {\n                col++;\n            }\n\n        }\n\n        // draw the outline layer in the 3° canvas\n        context.putImageData(outlineLayerData, 0, 0 );\n\n}\n\n    render() {\n\n    if (this.props.boundaries !== \"Mask doesn't exist\" && this.props.size !==undefined){\n        const { boundaries, size } = this.props;\n        console.log(this.state);\n        //this.drawMask(boundaries, size, this.canvasRef );\n    } \n\n    return(\n        <canvas id=\"outline\" ref=\"outline\" style={{ zIndex: 3, position:'relative', backgroundColor:'rgba(0, 255, 0, 0.3 )'}}>\n            Sorry, your browser doesn't support the &lt;canvas&gt; element.\n        </canvas>\n    )\n\n    \n    \n    \n    }\n    \n}\nexport default OutlineCanvas;\n\nfunction rect(props) {\n    const {context, x, y, width, height} = props;\n    context.fillRect(x, y, width, height);\n}\n\nfunction drawMask(props){\n    const {context, size, boundaries} = props;\n\n        //const canvas = this.refs.canvas;\n        //const context = canvas.getContext('2d');\n        context.canvas.width = size[0];\n        context.canvas.height = size[1];\n\n        let outlineLayerData = context.createImageData(size[0], size[1]);\n        let outlineImage = outlineLayerData.data;\n\n        // scroll the matrix with boundaries to create the outline image\n        let len = outlineLayerData.data.length;\n        // console.log(len);\n        let col = 0, row = 0;\n        let pixel = [];\n        for (let i = 0; i < len && row < size[1]; i += 4 ){\n            pixel = boundaries[row][col];\n            // console.log(\"pixel: \" + pixel);\n            if (pixel[0] == \"0\"){\n                outlineImage[i] = boundaries[0];       // r\n                outlineImage[i + 1] = boundaries[1];   // g\n                outlineImage[i + 2] = boundaries[2];   // b\n                outlineImage[i + 3] = boundaries[3];   // a\n            }\n            if (col == size[0] - 1){\n                row ++;\n                col = 0;\n            } else {\n                col++;\n            }\n\n        }\n\n        // draw the outline layer in the 3° canvas\n        context.putImageData(outlineLayerData, 0, 0 );\n\n}"]},"metadata":{},"sourceType":"module"}