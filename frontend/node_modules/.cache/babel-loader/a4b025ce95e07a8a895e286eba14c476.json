{"ast":null,"code":"var _jsxFileName = \"/Users/serenagiachetti/Desktop/projects/annotation_tool/frontend/src/components/ColorCanvas.js\";\nimport React, { Component } from 'react';\n\nclass ColorCanvas extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.state = {\n      drawingAreaX: 0,\n      drawingAreaY: 0,\n      clusterID: 0,\n      clusterList: [],\n      pointList: [],\n      draggedPointList: [],\n      draggedMaskPointList: [],\n      mouseDrag: false,\n      color: [255, 0, 0]\n    };\n  }\n\n  loadImage(size) {\n    const canvas = this.canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.canvas.width = size[0];\n    context.canvas.height = size[1];\n  }\n\n  getMousePos(e) {\n    let color_canvas = this.canvasRef.current;\n    let drawingAreaX = color_canvas.getBoundingClientRect().left;\n    let drawingAreaY = color_canvas.getBoundingClientRect().top; // get color_canvas position\n\n    this.setState(prevState => {\n      return {\n        drawingAreaX: drawingAreaX,\n        drawingAreaY: drawingAreaY\n      };\n    }); // mouse click coordinates on the canvas rounded to manage float case\n\n    let mouseX = Math.round(e.pageX - document.body.scrollLeft - document.documentElement.scrollLeft - drawingAreaX),\n        mouseY = Math.round(e.pageY - document.body.scrollTop - document.documentElement.scrollTop - drawingAreaY);\n    return [mouseX, mouseY];\n  }\n\n  clickMouse(event) {\n    [x, y] = this.getMousePos(event);\n    console.log(\"x: \" + x + \", y: \" + y); //paintAt(x, y);\n  }\n\n  dragStart(event) {}\n\n  dragOver(event) {}\n\n  dragEnd(event) {}\n\n  render() {\n    if (this.props.size !== undefined) {\n      const {\n        size\n      } = this.props;\n      this.loadImage(size);\n    }\n\n    return React.createElement(\"canvas\", {\n      id: \"color\",\n      ref: this.canvasRef,\n      style: {\n        zIndex: 3,\n        position: 'absolute',\n        backgroundColor: 'rgba(0, 0, 0, 0.5 )'\n      },\n      onClick: event => this.clickMouse(event),\n      onDragStart: event => this.dragStart(event),\n      onDragOver: event => this.dragOver(event),\n      onDragEnd: event => this.dragEnd(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Sorry, your browser doesn't support the <canvas> element.\");\n  }\n\n}\n\nexport default ColorCanvas;","map":{"version":3,"sources":["/Users/serenagiachetti/Desktop/projects/annotation_tool/frontend/src/components/ColorCanvas.js"],"names":["React","Component","ColorCanvas","constructor","props","canvasRef","createRef","state","drawingAreaX","drawingAreaY","clusterID","clusterList","pointList","draggedPointList","draggedMaskPointList","mouseDrag","color","loadImage","size","canvas","current","context","getContext","width","height","getMousePos","e","color_canvas","getBoundingClientRect","left","top","setState","prevState","mouseX","Math","round","pageX","document","body","scrollLeft","documentElement","mouseY","pageY","scrollTop","clickMouse","event","x","y","console","log","dragStart","dragOver","dragEnd","render","undefined","zIndex","position","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nclass ColorCanvas extends Component {\n\n    constructor (props){\n        super(props);\n        this.canvasRef = React.createRef();\n        this.state = {\n            drawingAreaX: 0,\n            drawingAreaY: 0,\n            clusterID: 0,\n            clusterList: [],\n            pointList: [],\n            draggedPointList: [],\n            draggedMaskPointList: [],\n            mouseDrag: false,\n            color: [255, 0, 0],\n\n        }\n    }\n\n    \n    loadImage(size){\n        const canvas = this.canvasRef.current;\n        const context = canvas.getContext('2d');\n        context.canvas.width = size[0];\n        context.canvas.height = size[1];\n        \n        \n    }\n\n    getMousePos(e){\n       let color_canvas = this.canvasRef.current;\n\n       let drawingAreaX = color_canvas.getBoundingClientRect().left;\n       let drawingAreaY = color_canvas.getBoundingClientRect().top;\n\n        // get color_canvas position\n        this.setState(prevState =>{\n            return {\n                drawingAreaX: drawingAreaX,\n                drawingAreaY: drawingAreaY\n            }\n        })\n\n        // mouse click coordinates on the canvas rounded to manage float case\n        let mouseX = Math.round(e.pageX - document.body.scrollLeft - document.documentElement.scrollLeft - drawingAreaX),\n            mouseY = Math.round(e.pageY - document.body.scrollTop - document.documentElement.scrollTop - drawingAreaY);\n\n        return [mouseX, mouseY];\n    }\n\n    clickMouse(event){\n        [x, y] = this.getMousePos(event);\n\n        console.log(\"x: \" + x + \", y: \" + y);\n\n        //paintAt(x, y);\n\n    }\n\n    dragStart(event){\n\n\n    }\n\n    dragOver(event){\n\n\n\n    }\n\n    dragEnd(event){\n\n\n\n    }\n\n\n    \n   render() {\n   \n    if (this.props.size !==undefined) {\n        const { size } = this.props;\n        this.loadImage(size);\n        \n    } \n\n        return(\n            <canvas id=\"color\"\n                    ref={this.canvasRef}\n                    style={{ zIndex: 3, position:'absolute', backgroundColor:'rgba(0, 0, 0, 0.5 )'}}\n                    onClick={(event) => this.clickMouse(event)}\n                    onDragStart={(event) => this.dragStart(event)}\n                    onDragOver={(event) => this.dragOver(event)}\n                    onDragEnd={(event) => this.dragEnd(event)}\n\n            >\n                Sorry, your browser doesn't support the &lt;canvas&gt; element. \n            </canvas> \n        )\n\n    \n    \n    \n    }\n    \n}\nexport default ColorCanvas;"]},"metadata":{},"sourceType":"module"}