{"ast":null,"code":"var _jsxFileName = \"/Users/serenagiachetti/Desktop/projects/annotation_tool/frontend/src/components/OutlineCanvas.js\";\nimport React, { Component } from 'react';\n\nclass OutlineCanvas extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.updateCanvas();\n  }\n\n  updateCanvas() {\n    const ctx = this.canvasRef.canvas.getContext('2d');\n    ctx.clearRect(0, 0, 300, 300); // draw children “components”\n\n    rect({\n      ctx,\n      x: 10,\n      y: 10,\n      width: 50,\n      height: 50\n    });\n    rect({\n      ctx,\n      x: 110,\n      y: 110,\n      width: 50,\n      height: 50\n    });\n  }\n\n  drawMask(boundaries, size) {\n    const canvas = this.refs.canvas;\n    const context = canvas.getContext('2d');\n    context.canvas.width = size[0];\n    context.canvas.height = size[1];\n    let outlineLayerData = context.createImageData(size[0], size[1]);\n    let outlineImage = outlineLayerData.data; // scroll the matrix with boundaries to create the outline image\n\n    let len = outlineLayerData.data.length; // console.log(len);\n\n    let col = 0,\n        row = 0;\n    let pixel = [];\n\n    for (let i = 0; i < len && row < size[1]; i += 4) {\n      pixel = boundaries[row][col]; // console.log(\"pixel: \" + pixel);\n\n      if (pixel[0] == \"0\") {\n        outlineImage[i] = boundaries[0]; // r\n\n        outlineImage[i + 1] = boundaries[1]; // g\n\n        outlineImage[i + 2] = boundaries[2]; // b\n\n        outlineImage[i + 3] = boundaries[3]; // a\n      }\n\n      if (col == size[0] - 1) {\n        row++;\n        col = 0;\n      } else {\n        col++;\n      }\n    } // draw the outline layer in the 3° canvas\n\n\n    context.putImageData(outlineLayerData, 0, 0);\n  }\n\n  render() {\n    if (this.props.boundaries !== \"Mask doesn't exist\" && this.props.size !== undefined) {\n      const {\n        boundaries,\n        size\n      } = this.props; //this.drawMask(boundaries, size, this.canvasRef );\n    }\n\n    return React.createElement(\"canvas\", {\n      id: \"outline\",\n      ref: this.canvasRef,\n      style: {\n        zIndex: 3,\n        position: 'relative',\n        backgroundColor: 'rgba(0, 255, 0, 0.3 )'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Sorry, your browser doesn't support the <canvas> element.\");\n  }\n\n}\n\nexport default OutlineCanvas;\n\nfunction rect(props) {\n  const {\n    ctx,\n    x,\n    y,\n    width,\n    height\n  } = props;\n  ctx.fillRect(x, y, width, height);\n}","map":{"version":3,"sources":["/Users/serenagiachetti/Desktop/projects/annotation_tool/frontend/src/components/OutlineCanvas.js"],"names":["React","Component","OutlineCanvas","constructor","props","canvasRef","createRef","componentDidMount","updateCanvas","ctx","canvas","getContext","clearRect","rect","x","y","width","height","drawMask","boundaries","size","refs","context","outlineLayerData","createImageData","outlineImage","data","len","length","col","row","pixel","i","putImageData","render","undefined","zIndex","position","backgroundColor","fillRect"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nclass OutlineCanvas extends Component {\n\n    constructor (props){\n        super(props);\n        this.canvasRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.updateCanvas();\n    }\n\n    updateCanvas() {\n        const ctx = this.canvasRef.canvas.getContext('2d');\n        ctx.clearRect(0,0, 300, 300);\n        // draw children “components”\n        rect({ctx, x: 10, y: 10, width: 50, height: 50});\n        rect({ctx, x: 110, y: 110, width: 50, height: 50});\n    }\n\n\n    drawMask(boundaries, size){\n        const canvas = this.refs.canvas;\n        const context = canvas.getContext('2d');\n        context.canvas.width = size[0];\n        context.canvas.height = size[1];\n\n        let outlineLayerData = context.createImageData(size[0], size[1]);\n        let outlineImage = outlineLayerData.data;\n\n        // scroll the matrix with boundaries to create the outline image\n        let len = outlineLayerData.data.length;\n        // console.log(len);\n        let col = 0, row = 0;\n        let pixel = [];\n        for (let i = 0; i < len && row < size[1]; i += 4 ){\n            pixel = boundaries[row][col];\n            // console.log(\"pixel: \" + pixel);\n            if (pixel[0] == \"0\"){\n                outlineImage[i] = boundaries[0];       // r\n                outlineImage[i + 1] = boundaries[1];   // g\n                outlineImage[i + 2] = boundaries[2];   // b\n                outlineImage[i + 3] = boundaries[3];   // a\n            }\n            if (col == size[0] - 1){\n                row ++;\n                col = 0;\n            } else {\n                col++;\n            }\n\n        }\n\n        // draw the outline layer in the 3° canvas\n        context.putImageData(outlineLayerData, 0, 0 );\n\n}\n\n   render() {\n\n    if (this.props.boundaries !== \"Mask doesn't exist\" && this.props.size !==undefined){\n        const { boundaries, size } = this.props;\n        //this.drawMask(boundaries, size, this.canvasRef );\n    } \n\n    return(\n        <canvas id=\"outline\" ref={this.canvasRef} style={{ zIndex: 3, position:'relative', backgroundColor:'rgba(0, 255, 0, 0.3 )'}}>\n            Sorry, your browser doesn't support the &lt;canvas&gt; element.\n        </canvas>\n    )\n\n    \n    \n    \n    }\n    \n}\nexport default OutlineCanvas;\n\nfunction rect(props) {\n    const {ctx, x, y, width, height} = props;\n    ctx.fillRect(x, y, width, height);\n}"]},"metadata":{},"sourceType":"module"}